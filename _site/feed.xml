<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-09-11T15:29:59+09:00</updated><id>http://localhost:4000/</id><title type="html">k3y6reak</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><entry><title type="html">Registry</title><link href="http://localhost:4000/technique/powershell/2017/09/08/Registry.html" rel="alternate" type="text/html" title="Registry" /><published>2017-09-08T14:56:00+09:00</published><updated>2017-09-08T14:56:00+09:00</updated><id>http://localhost:4000/technique/powershell/2017/09/08/Registry</id><content type="html" xml:base="http://localhost:4000/technique/powershell/2017/09/08/Registry.html">&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;PowerShell에서 레지스트리에 접근하고자 하는 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;Get-Item&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Get-ChildItem&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Get-ItemProperty&lt;/code&gt;를 사용할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;get-item&quot;&gt;Get-Item&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak&amp;gt; Get-Item 'HKLM:\Software\Microsoft\Windows NT\CurrentVersion'


    Hive: HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT


Name                           Property
----                           --------
CurrentVersion                 SystemRoot                : C:\WINDOWS
                               BuildBranch               : rs2_release
                               BuildGUID                 : ffffffff-ffff-ffff-ffff-ffffffffffff
                               BuildLab                  : 15063.rs2_release.170317-1834
                               BuildLabEx                : 15063.0.amd64fre.rs2_release.170317-1834
                               CompositionEditionID      : Education
                               CurrentBuild              : 15063
                               CurrentBuildNumber        : 15063
                               CurrentMajorVersionNumber : 10
                               CurrentMinorVersionNumber : 0
                               CurrentType               : Multiprocessor Free
                               CurrentVersion            : 6.3
                               EditionID                 : Education
                               EditionSubstring          :
                               InstallationType          : Client
                               InstallDate               : 1502094253
                               ProductName               : Windows 10 Education
                               ReleaseId                 : 1703
                               SoftwareType              : System
                               UBR                       : 540
                               PathName                  : C:\WINDOWS
                               ProductId                 : 
                               DigitalProductId          : 
                               DigitalProductId4         : 
                               RegisteredOrganization    :
                               RegisteredOwner           : k3y6reak
                               InstallTime               : 131465678534059230&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;get-itemproperty&quot;&gt;Get-ItemProperty&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak&amp;gt; Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion'


SystemRoot                : C:\WINDOWS
BuildBranch               : rs2_release
BuildGUID                 : ffffffff-ffff-ffff-ffff-ffffffffffff
BuildLab                  : 15063.rs2_release.170317-1834
BuildLabEx                : 15063.0.amd64fre.rs2_release.170317-1834
CompositionEditionID      : Education
CurrentBuild              : 15063
CurrentBuildNumber        : 15063
CurrentMajorVersionNumber : 10
CurrentMinorVersionNumber : 0
CurrentType               : Multiprocessor Free
CurrentVersion            : 6.3
EditionID                 : Education
EditionSubstring          :
InstallationType          : Client
InstallDate               : 1502094253
ProductName               : Windows 10 Education
ReleaseId                 : 1703
SoftwareType              : System
UBR                       : 540
PathName                  : C:\WINDOWS
ProductId                 : 
DigitalProductId          : 
DigitalProductId4         : 
RegisteredOrganization    :
RegisteredOwner           : k3y6reak
InstallTime               : 131465678534059230
PSPath                    : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion
PSParentPath              : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT
PSChildName               : CurrentVersion
PSDrive                   : HKLM
PSProvider                : Microsoft.PowerShell.Core\Registry&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;get-childitem&quot;&gt;Get-ChildItem&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak&amp;gt; Get-ChildItem 'HKLM:\software\microsoft\windows nt\CurrentVersion' -Recurse | more
Get-ChildItem : 요청한 레지스트리에 액세스할 수 없습니다.
위치 줄:1 문자:1
+ Get-ChildItem 'HKLM:\software\microsoft\windows nt\CurrentVersion' -R ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : PermissionDenied: (HKEY_LOCAL_MACH...lags\CIT\System:String) [Get-ChildItem], SecurityException
    + FullyQualifiedErrorId : System.Security.SecurityException,Microsoft.PowerShell.Commands.GetChildItemCommand


...(중략)


    Hive: HKEY_LOCAL_MACHINE\software\microsoft\windows nt\CurrentVersion


Name                           Property
----                           --------
Accessibility


    Hive: HKEY_LOCAL_MACHINE\software\microsoft\windows nt\CurrentVersion\Accessibility


Name                           Property
----                           --------
ATs


    Hive: HKEY_LOCAL_MACHINE\software\microsoft\windows nt\CurrentVersion\Accessibility\ATs


Name                           Property
----                           --------
animations                     Description   :
                               Profile       : &amp;lt;HCIModel&amp;gt;&amp;lt;Accommodation type=&quot;mild cognitive&quot; /&amp;gt;&amp;lt;Accommodation type=&quot;severe cognitive&quot; /&amp;gt;&amp;lt;Accommodation type=&quot;severe vision&quot; /&amp;gt;&amp;lt;Accommodation type=&quot;mild vision&quot;
                               /&amp;gt;&amp;lt;/HCIModel&amp;gt;
                               SimpleProfile : SystemSetting
                               StartExe      : 13
...(생략)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;추가적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Set-Location&lt;/code&gt;을 이용하여 레지스트리에 직접 접근할 수 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak&amp;gt; Set-Location Registry::
PS Microsoft.PowerShell.Core\Registry::&amp;gt; ls


    Hive:


Name                           Property
----                           --------
HKEY_LOCAL_MACHINE
HKEY_CURRENT_USER
HKEY_CLASSES_ROOT
HKEY_CURRENT_CONFIG
HKEY_USERS
HKEY_PERFORMANCE_DATA          Global : {80, 0, 69, 0...}
                               Costly : {80, 0, 69, 0...}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이번에는 레지스트리를 수정하고 생성하는 방법을 알아 봅시다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;New-Item&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;New-ItemProperty&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Rename-Item&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Rename-ItemProperty&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Set-ItemProperty&lt;/code&gt;가 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;new-item&quot;&gt;New-Item&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak&amp;gt; Get-PSProvider

Name                 Capabilities                                                                     Drives
----                 ------------                                                                     ------
Registry             ShouldProcess, Transactions                                                      {HKLM, HKCU}
Alias                ShouldProcess                                                                    {Alias}
Environment          ShouldProcess                                                                    {Env}
FileSystem           Filter, ShouldProcess, Credentials                                               {C, D, E, Y...}
Function             ShouldProcess                                                                    {Function}
Variable             ShouldProcess                                                                    {Variable}

PS C:\Users\k3y6reak&amp;gt; New-Item -Path HKCU:\k3y6reak


    Hive: HKEY_CURRENT_USER


Name                           Property
----                           --------
k3y6reak&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위와 같이 스크립트를 실행하면 아래 그림 처럼 레지스트리를 등록할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/powershell/registry/registry.png&quot; alt=&quot;powershell_create_registry&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;new-itemproperty&quot;&gt;New-ItemProperty&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak&amp;gt; New-ItemProperty -Path HKCU:\k3y6reak\ -Name Reg1 -PropertyType String -Value 2


Reg1         : 2
PSPath       : Microsoft.PowerShell.Core\Registry::HKEY_CURRENT_USER\k3y6reak\
PSParentPath : Microsoft.PowerShell.Core\Registry::HKEY_CURRENT_USER
PSChildName  : k3y6reak
PSDrive      : HKCU
PSProvider   : Microsoft.PowerShell.Core\Registry&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위와 같이 해당 위치에 값 또한 설정할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;rename-item&quot;&gt;Rename-Item&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak&amp;gt; Rename-Item HKCU:\k3y6reak -newname k3y6reak2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;특정 레지스트리의 이름을 변경할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;rename-itemproperty&quot;&gt;Rename-ItemProperty&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak&amp;gt; Rename-ItemProperty HKCU:\k3y6reak2 -Name Reg1 -NewName Reg2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;마찬가지로 특정 레지스트리의 값 또한 변경할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;set-itemproperty&quot;&gt;Set-ItemProperty&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak&amp;gt; Set-ItemProperty -Path HKCU:\k3y6reak2 -Name Reg2 -Value 4855&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">COM</title><link href="http://localhost:4000/technique/powershell/2017/09/06/COM.html" rel="alternate" type="text/html" title="COM" /><published>2017-09-06T19:14:00+09:00</published><updated>2017-09-06T19:14:00+09:00</updated><id>http://localhost:4000/technique/powershell/2017/09/06/COM</id><content type="html" xml:base="http://localhost:4000/technique/powershell/2017/09/06/COM.html">&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;COM&lt;/code&gt;은 Component Object Model로 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8_%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8_%EB%AA%A8%EB%8D%B8&quot;&gt;위키백과&lt;/a&gt;를 참조하길 바란다.&lt;/p&gt;

&lt;p&gt;PowerShell에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;ComObject&lt;/code&gt;를 이용해 Registry에 접근할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Get-ChildItem REGISTRY::HKEY_CLASSES_ROOT\CLSID -include PROGID -recurse | ForEach {$_.GetValue(&quot;&quot;)}&lt;/code&gt;를 실행해 보자.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\WINDOWS\system32&amp;gt; Get-ChildItem REGISTRY::HKEY_CLASSES_ROOT\CLSID -include PROGID -recurse | ForEach {$_.GetValue(&quot;&quot;)}
file
StaticMetafile
StaticDib
clsid
objref
ADODB.Command.6.0
ADODB.Parameter.6.0
ADODB.Connection.6.0
ADODB.Recordset.6.0
...(생략)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;많은 결과가 출력되는데 이 중 &lt;code class=&quot;highlighter-rouge&quot;&gt;wscript&lt;/code&gt;만 출력해 보자. &lt;code class=&quot;highlighter-rouge&quot;&gt;| Where-Object {$_ -match &quot;wscript&quot;}&lt;/code&gt;를 붙여주면 된다. wscript는 윈도우에서 사용하는 스크립트다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\WINDOWS\system32&amp;gt; Get-ChildItem REGISTRY::HKEY_CLASSES_ROOT\CLSID -include PROGID -recurse | ForEach {$_.GetValue(&quot;&quot;)} | Where-Object {$_ -match &quot;wscript&quot;}
WScript.Network.1
WScript.Shell.1
WScript.Shell.1
WScript.Network.1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;여기서 WScript.Shell.1을 사용해보자.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$wscript = New-Object -ComObject Wscript.Shell.1&lt;/code&gt;을 입력한 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;$wscript | Get-Member&lt;/code&gt;을 입력해 보자.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\WINDOWS\system32&amp;gt; $wscript = New-Object -ComObject Wscript.Shell.1
PS C:\WINDOWS\system32&amp;gt; $wscript | Get-Member


   TypeName: System.__ComObject#{41904400-be18-11d3-a28b-00104bd35090}

Name                     MemberType            Definition
----                     ----------            ----------
AppActivate              Method                bool AppActivate (Variant, Variant)
CreateShortcut           Method                IDispatch CreateShortcut (string)
Exec                     Method                IWshExec Exec (string)
ExpandEnvironmentStrings Method                string ExpandEnvironmentStrings (string)
LogEvent                 Method                bool LogEvent (Variant, string, string)
Popup                    Method                int Popup (string, Variant, Variant, Variant)
RegDelete                Method                void RegDelete (string)
RegRead                  Method                Variant RegRead (string)
RegWrite                 Method                void RegWrite (string, Variant, Variant)
Run                      Method                int Run (string, Variant, Variant)
SendKeys                 Method                void SendKeys (string, Variant)
Environment              ParameterizedProperty IWshEnvironment Environment (Variant) {get}
CurrentDirectory         Property              string CurrentDirectory () {get} {set}
SpecialFolders           Property              IWshCollection SpecialFolders () {get}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;사용할 수 있는 Method들이 출력된 것을 볼 수 있다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\WINDOWS\system32&amp;gt; $wscript.CurrentDirectory
C:\WINDOWS\system32
PS C:\WINDOWS\system32&amp;gt; $wscript.Exec(&quot;notepad.exe&quot;)


Status    : 0
StdIn     : System.__ComObject
StdOut    : System.__ComObject
StdErr    : System.__ComObject
ProcessID : 8056
ExitCode  : 0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이렇게 사용할 수 있다.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">WMI</title><link href="http://localhost:4000/technique/powershell/2017/09/04/WMI.html" rel="alternate" type="text/html" title="WMI" /><published>2017-09-04T20:01:00+09:00</published><updated>2017-09-04T20:01:00+09:00</updated><id>http://localhost:4000/technique/powershell/2017/09/04/WMI</id><content type="html" xml:base="http://localhost:4000/technique/powershell/2017/09/04/WMI.html">&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WMI&lt;/code&gt;는 Windows Management Instrumentation으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;윈도우 관리 도구&lt;/code&gt;다. 이를 PowerShell에서 사용할 수 있는데 &lt;code class=&quot;highlighter-rouge&quot;&gt;Get-WmiObject&lt;/code&gt;명령을 이용한다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\WINDOWS\system32&amp;gt; Get-WmiObject -Namespace &quot;root&quot; -Class &quot;__Namespace&quot;


__GENUS          : 2
__CLASS          : __NAMESPACE
__SUPERCLASS     : __SystemClass
__DYNASTY        : __SystemClass
__RELPATH        : __NAMESPACE.Name=&quot;subscription&quot;
__PROPERTY_COUNT : 1
__DERIVATION     : {__SystemClass}
__SERVER         : K3Y6REAK9778
__NAMESPACE      : ROOT
__PATH           : \\K3Y6REAK9778\ROOT:__NAMESPACE.Name=&quot;subscription&quot;
Name             : subscription
PSComputerName   : K3Y6REAK9778

__GENUS          : 2
__CLASS          : __NAMESPACE
__SUPERCLASS     : __SystemClass
__DYNASTY        : __SystemClass
__RELPATH        : __NAMESPACE.Name=&quot;DEFAULT&quot;
__PROPERTY_COUNT : 1
__DERIVATION     : {__SystemClass}
__SERVER         : K3Y6REAK9778
__NAMESPACE      : ROOT
__PATH           : \\K3Y6REAK9778\ROOT:__NAMESPACE.Name=&quot;DEFAULT&quot;
Name             : DEFAULT
PSComputerName   : K3Y6REAK9778&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;여기서 이름에 대한 내용만 가져오고 싶은 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;| Select-Object Name&lt;/code&gt;를 붙여주면 된다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\WINDOWS\system32&amp;gt; Get-WmiObject -Namespace &quot;root&quot; -Class &quot;__Namespace&quot; | Select-Object Name

Name
----
subscription
DEFAULT
CIMV2
msdtc
Cli
SECURITY
SecurityCenter2
RSOP
PEH
StandardCimv2
WMI
directory
Policy
Interop
Hardware
ServiceModel
SecurityCenter
Microsoft
aspnet
Appv&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Wmi-Object 중에서 CIMV2에 대한 내용을 살펴보자.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Get-WmiObject -NameSpace &quot;root/cimv2&quot; -List&lt;/code&gt;를 입력하면 아래와 같은 수많은 항목을 볼 수 있다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\WINDOWS\system32&amp;gt; Get-WmiObject -NameSpace &quot;root/cimv2&quot; -List


   NameSpace: ROOT\CIMV2

Name                                Methods              Properties
----                                -------              ----------
__SystemClass                       {}                   {}
__thisNAMESPACE                     {}                   {SECURITY_DESCRIPTOR}
__Provider                          {}                   {Name}
__Win32Provider                     {}                   {ClientLoadableCLSID, CLSID, Concurrency, DefaultMachineName...}
__ProviderRegistration              {}                   {provider}
__EventProviderRegistration         {}                   {EventQueryList, provider}
__ObjectProviderRegistration        {}                   {InteractionType, provider, QuerySupportLevels, SupportsBatching...}
__ClassProviderRegistration         {}                   {CacheRefreshInterval, InteractionType, PerUserSchema, provider...}
__InstanceProviderRegistration      {}                   {InteractionType, provider, QuerySupportLevels, SupportsBatching...}

...(생략)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;여기서 Win32에 대한 항목을 보고 싶다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;| Where-Object {$_.Name -match &quot;Win32}&lt;/code&gt;를 붙여주면 된다. 마찬가지로 많은 항목이 출력된다. 이 중 Win32_Process을 사용해 보자.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Get-WmiObject -Class Win32_Process&lt;/code&gt;를 실행하면 이 또한 많은 항목이 출력된다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;__GENUS                    : 2
__CLASS                    : Win32_Process
__SUPERCLASS               : CIM_Process
__DYNASTY                  : CIM_ManagedSystemElement
__RELPATH                  : Win32_Process.Handle=&quot;604&quot;
__PROPERTY_COUNT           : 45
__DERIVATION               : {CIM_Process, CIM_LogicalElement, CIM_ManagedSystemElement}
__SERVER                   : K3Y6REAK9778
__NAMESPACE                : root\cimv2
__PATH                     : \\K3Y6REAK9778\root\cimv2:Win32_Process.Handle=&quot;604&quot;
Caption                    : wininit.exe
CommandLine                :
CreationClassName          : Win32_Process
CreationDate               : 20170813174441.546153+540
CSCreationClassName        : Win32_ComputerSystem
CSName                     : K3Y6REAK9778
Description                : wininit.exe
ExecutablePath             :
ExecutionState             :
Handle                     : 604
HandleCount                : 152
InstallDate                :
KernelModeTime             : 12343750
MaximumWorkingSetSize      :
MinimumWorkingSetSize      :
Name                       : wininit.exe
OSCreationClassName        : Win32_OperatingSystem
OSName                     : Microsoft Windows 10 Education|C:\WINDOWS|\Device\Harddisk0\Partition4
OtherOperationCount        : 17201
OtherTransferCount         : 4702606
PageFaults                 : 6127
PageFileUsage              : 1704
ParentProcessId            : 500
PeakPageFileUsage          : 2200
PeakVirtualSize            : 2199082618880
PeakWorkingSetSize         : 7188
Priority                   : 13
PrivatePageCount           : 1744896
ProcessId                  : 604
QuotaNonPagedPoolUsage     : 12
QuotaPagedPoolUsage        : 120
QuotaPeakNonPagedPoolUsage : 15
QuotaPeakPagedPoolUsage    : 122
ReadOperationCount         : 22
ReadTransferCount          : 56320
SessionId                  : 0
Status                     :
TerminationDate            :
ThreadCount                : 1
UserModeTime               : 0
VirtualSize                : 2199078547456
WindowsVersion             : 10.0.15063
WorkingSetSize             : 4096
WriteOperationCount        : 0
WriteTransferCount         : 0
PSComputerName             : K3Y6REAK9778
ProcessName                : wininit.exe
Handles                    : 152
VM                         : 2199078547456
WS                         : 4096
Path                       :&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이름만 출력하고 싶다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;| select Name&lt;/code&gt;을 붙여주면 된다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\WINDOWS\system32&amp;gt; Get-WmiObject -Class Win32_Process | Select Name

Name
----
System Idle Process
System
smss.exe
csrss.exe
wininit.exe
services.exe
lsass.exe
svchost.exe
svchost.exe
fontdrvhost.exe
svchost.exe
svchost.exe
svchost.exe
svchost.exe
WUDFHost.exe
...(생략)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이 명령어을 이용해서 Win7의 정보를 가져올 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Get-WmiObject -Class Win32_Process -ComputerName [Win7 컴퓨터이름] -Credential [Win7 계정] | select Name&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\WINDOWS\system32&amp;gt; Get-WmiObject -Class Win32_Process -ComputerName WIN-J9KO348JQVU -Credential k3y6reak | select Name

Name
----
System Idle Process
System
smss.exe
csrss.exe
wininit.exe
csrss.exe
winlogon.exe
services.exe
lsass.exe
lsm.exe
svchost.exe
vmacthlp.exe
svchost.exe
svchost.exe
svchost.exe
svchost.exe
audiodg.exe
svchost.exe
svchost.exe
spoolsv.exe
svchost.exe
VGAuthService.exe
vmtoolsd.exe
svchost.exe
dllhost.exe
dllhost.exe
WmiPrvSE.exe
msdtc.exe
taskhost.exe
dwm.exe
explorer.exe
vmtoolsd.exe
VSSVC.exe
SearchIndexer.exe
wmpnetwk.exe
svchost.exe
SearchProtocolHost.exe
SearchFilterHost.exe
WmiPrvSE.exe
WmiApSrv.exe
powershell.exe
conhost.exe
sppsvc.exe
svchost.exe&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;여러 프로세스 중 특정 한 프로세스만 출력하고 싶은 경우 여러가지 방법이 있다.&lt;/p&gt;

&lt;h4 id=&quot;-eq&quot;&gt;-eq&lt;/h4&gt;

&lt;p&gt;eq는 equal로 같은 문자열이 있는 것을 찾는다. 
&lt;code class=&quot;highlighter-rouge&quot;&gt;Get-WmiObject -Class Win32_Process | Where-Object {$_.Name -eq &quot;powershell.exe&quot;}&lt;/code&gt;를 이용해 powershell.exe를 찾게된다.&lt;/p&gt;

&lt;h4 id=&quot;-filter&quot;&gt;-Filter&lt;/h4&gt;

&lt;p&gt;필터 또한 찾고자 하는 문자열을 찾아주는 기능을 한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Get-WmiObject -Class Win32_Process -Filter {Name = &quot;powershell.exe&quot;}&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;-query&quot;&gt;-Query&lt;/h4&gt;

&lt;p&gt;쿼리는 쿼리문을 이용하여 찾는 방법을 말한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Get-WmiObject -Query {Select * from Win32_Process where name = &quot;powershell.exe&quot;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;eq, filter, query&lt;/code&gt; 모두 동일한 결과를 출력한다.&lt;/p&gt;

&lt;p&gt;WMI을 이용해서 프로세스를 실행시킬 수 있다. 먼저 Win32_Process에서 사용할 수 있는 Method를 살펴보자.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Get-WmiObject -Class Win32_Process -List&lt;/code&gt;를 입력한다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\WINDOWS\system32&amp;gt; Get-WmiObject -Class Win32_Process -List


   NameSpace: ROOT\cimv2

Name                                Methods              Properties
----                                -------              ----------
Win32_Process                       {Create, Terminat... {Caption, CommandLine, CreationClassName, CreationDate...}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Methods 항목에 Create, Termiat… 를 볼 수 있는데 사용할 수 있는 Method를 모두 보자.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Get-WmiObject -Class Win32_Process -List | Select-Object -ExpandProterty Methods&lt;/code&gt;를 입력해 보자.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\WINDOWS\system32&amp;gt; Get-WmiObject -Class Win32_Process -List | Select-Object -ExpandProperty Methods


Name          : Create
InParameters  : System.Management.ManagementBaseObject
OutParameters : System.Management.ManagementBaseObject
Origin        : Win32_Process
Qualifiers    : {Constructor, Implemented, MappingStrings, Privileges...}

Name          : Terminate
InParameters  : System.Management.ManagementBaseObject
OutParameters : System.Management.ManagementBaseObject
Origin        : Win32_Process
Qualifiers    : {Destructor, Implemented, MappingStrings, Privileges...}

Name          : GetOwner
InParameters  :
OutParameters : System.Management.ManagementBaseObject
Origin        : Win32_Process
Qualifiers    : {Implemented, MappingStrings, ValueMap}

Name          : GetOwnerSid
InParameters  :
OutParameters : System.Management.ManagementBaseObject
Origin        : Win32_Process
Qualifiers    : {Implemented, MappingStrings, ValueMap}

Name          : SetPriority
InParameters  : System.Management.ManagementBaseObject
OutParameters : System.Management.ManagementBaseObject
Origin        : Win32_Process
Qualifiers    : {Implemented, MappingStrings, ValueMap}

Name          : AttachDebugger
InParameters  :
OutParameters : System.Management.ManagementBaseObject
Origin        : Win32_Process
Qualifiers    : {Implemented, ValueMap}

Name          : GetAvailableVirtualSize
InParameters  :
OutParameters : System.Management.ManagementBaseObject
Origin        : Win32_Process
Qualifiers    : {Implemented, ValueMap}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위 출력결과를 보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Create, Terminate, GetOwner, GetOwnerSid, SetPriority, AttachDebugger, GetAvailableVirtualSize&lt;/code&gt;를 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Invoke-WmiMethod&lt;/code&gt; 명령어를 통해서 notepad.exe를 실행해보자.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Invoke-WmiMethod -Class Win32_Process -Name Create -ArgumentList &quot;notepad.exe&quot;&lt;/code&gt;를 입력해 보자.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\WINDOWS\system32&amp;gt; Invoke-WmiMethod -Class Win32_Process -Name Create -ArgumentList &quot;notepad.exe&quot;


__GENUS          : 2
__CLASS          : __PARAMETERS
__SUPERCLASS     :
__DYNASTY        : __PARAMETERS
__RELPATH        :
__PROPERTY_COUNT : 2
__DERIVATION     : {}
__SERVER         :
__NAMESPACE      :
__PATH           :
ProcessId        : 2940
ReturnValue      : 0
PSComputerName   :&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Invoke-WmiMethod&lt;/code&gt; 또한 Win7에 notepad.exe를 실행할 수 있다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\WINDOWS\system32&amp;gt; Invoke-WmiMethod -Class Win32_Process -Name Create -ArgumentList &quot;notepad.exe&quot; -ComputerName WIN-J9KO348JQVU -Credential k3y6reak


__GENUS          : 2
__CLASS          : __PARAMETERS
__SUPERCLASS     :
__DYNASTY        : __PARAMETERS
__RELPATH        :
__PROPERTY_COUNT : 2
__DERIVATION     : {}
__SERVER         :
__NAMESPACE      :
__PATH           :
ProcessId        : 2420
ReturnValue      : 0
PSComputerName   :&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;실행 결과를 보면 실행이 된 것을 볼 수 있는데 실제 Win7에서 확인해보면 실행되지 않는다.&lt;/p&gt;

&lt;p&gt;실행시킬 수 있는 방법에 대해서 알아봐야겠다.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Jobs</title><link href="http://localhost:4000/technique/powershell/2017/09/01/jobs.html" rel="alternate" type="text/html" title="Jobs" /><published>2017-09-01T10:34:00+09:00</published><updated>2017-09-01T10:34:00+09:00</updated><id>http://localhost:4000/technique/powershell/2017/09/01/jobs</id><content type="html" xml:base="http://localhost:4000/technique/powershell/2017/09/01/jobs.html">&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;job&lt;/code&gt;은 PowerShell에서 사용되는 것으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Background&lt;/code&gt;로 실행하는 것을 말합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak\Desktop&amp;gt; Help *job*






Remove-Job                        Cmdlet    Microsoft.PowerShell.Core Deletes a Windows PowerShell background job.
Start-Job                         Cmdlet    Microsoft.PowerShell.Core Starts a Windows PowerShell background job.
Stop-Job                          Cmdlet    Microsoft.PowerShell.Core Stops a Windows PowerShell background job.
Wait-Job                          Cmdlet    Microsoft.PowerShell.Core Suppresses the command prompt until one or all of the Windows PowerShell background jobs running in the session are completed.
Resume-Job                        Cmdlet    Microsoft.PowerShell.Core Restarts a suspended job.
Suspend-Job                       Cmdlet    Microsoft.PowerShell.Core Temporarily stops workflow jobs.
Add-JobTrigger                    Cmdlet    PSScheduledJob            Adds job triggers to scheduled jobs.
Disable-JobTrigger                Cmdlet    PSScheduledJob            Disables the job triggers of scheduled jobs.
Disable-ScheduledJob              Cmdlet    PSScheduledJob            Disables a scheduled job.
Enable-JobTrigger                 Cmdlet    PSScheduledJob            Enables the job triggers of scheduled jobs.
Enable-ScheduledJob               Cmdlet    PSScheduledJob            Enables a scheduled job.
Get-JobTrigger                    Cmdlet    PSScheduledJob            Gets the job triggers of scheduled jobs.
Get-ScheduledJob                  Cmdlet    PSScheduledJob            Gets scheduled jobs on the local computer.
Get-ScheduledJobOption            Cmdlet    PSScheduledJob            Gets the job options of scheduled jobs.
New-JobTrigger                    Cmdlet    PSScheduledJob            Creates a job trigger for a scheduled job.
New-ScheduledJobOption            Cmdlet    PSScheduledJob            Creates an object that contains advanced options for a scheduled job.
Register-ScheduledJob             Cmdlet    PSScheduledJob            Creates a scheduled job.
Remove-JobTrigger                 Cmdlet    PSScheduledJob            Delete job triggers from scheduled jobs.
Set-JobTrigger                    Cmdlet    PSScheduledJob            Changes the job trigger of a scheduled job.
Set-ScheduledJob                  Cmdlet    PSScheduledJob            Changes scheduled jobs.
Set-ScheduledJobOption            Cmdlet    PSScheduledJob            Changes the job options of a scheduled job.
Unregister-ScheduledJob           Cmdlet    PSScheduledJob            Deletes scheduled jobs on the local computer.
Resume-PrintJob                   Function  PrintManagement           ...
Suspend-PrintJob                  Function  PrintManagement           ...
Restart-PrintJob                  Function  PrintManagement           ...
Get-PrintJob                      Function  PrintManagement           ...
Remove-PrintJob                   Function  PrintManagement           ...
Stop-StorageJob                   Function  Storage                   ...
Get-StorageJob                    Function  Storage                   ...
about_Jobs                        HelpFile                            Provides information about how Windows PowerShell background jobs run a
about_Job_Details                 HelpFile                            Provides details about background jobs on local and remote computers.
about_Remote_Jobs                 HelpFile                            Describes how to run background jobs on remote computers.
about_Scheduled_Jobs              HelpFile                            Describes scheduled jobs and explains how to use and manage
about_Scheduled_Jobs_Advanced     HelpFile                            Explains advanced scheduled job topics, including the file structure
about_Scheduled_Jobs_Basics       HelpFile                            Explains how to create and manage scheduled jobs.
about_Scheduled_Jobs_Troublesh... HelpFile                            Explains how to resolve problems with scheduled jobs
about_Scheduled_Jobs              HelpFile                            Describes scheduled jobs and explains how to use and manage
about_Scheduled_Jobs_Advanced     HelpFile                            Explains advanced scheduled job topics, including the file structure
about_Scheduled_Jobs_Basics       HelpFile                            Explains how to create and manage scheduled jobs.
about_Scheduled_Jobs_Troublesh... HelpFile                            Explains how to resolve problems with scheduled jobs&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Job&lt;/code&gt;에 관한 내용을 찾아보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Start-Job&lt;/code&gt; 명령어가 있는데 이 명령어를 통해서 실행할 수 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\WINDOWS\system32&amp;gt; Start-Job -ScriptBlock {whoami}

Id     Name            PSJobTypeName   State         HasMoreData     Location             Command
--     ----            -------------   -----         -----------     --------             -------
1      Job1            BackgroundJob   Running       True            localhost            whoami&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Background&lt;/code&gt; 상태로 &lt;code class=&quot;highlighter-rouge&quot;&gt;whoami&lt;/code&gt;명령이 실행된 것을 볼 수 있습니다. 해당 명령의 실행결과를 출력하고자 할 때는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Receive-Job&lt;/code&gt;을 이용하면 됩니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\WINDOWS\system32&amp;gt; Get-Job -Id 1 | Receive-Job
k3y6reak9778\k3y6reak&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이번에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows7&lt;/code&gt;에서 Job을 실행시킨 후 해당 결과를 출력해 보도록 하겠습니다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;$se&lt;/code&gt;라는 변수를 이용하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;PSSession&lt;/code&gt;을 이용해야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$se = New-PSSession -ComputerName [Windows7 컴퓨터 이름] -Credential [Windows7 계정]&lt;/code&gt;을 입력합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\WINDOWS\system32&amp;gt; $se = New-PSSession -ComputerName WIN-J9KO348JQVU -Credential k3y6reak
PS C:\WINDOWS\system32&amp;gt; Invoke-Command -ScriptBlock {Start-Job -ScriptBlock {ps}} -Session $se

Id     Name            PSJobTypeName   State         HasMoreData     Location             Command                   PSComputerName
--     ----            -------------   -----         -----------     --------             -------                   --------------
1      Job1                            Running       True            localhost            ps                        WIN-J9KO348JQVU&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Invoke-Command -ScriptBlock { Get-Job | Receive-Job } -Session $se&lt;/code&gt;를 입력하면 Windows7에서 실행되는 프로세스의 목록을 가져올 수 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\WINDOWS\system32&amp;gt; Invoke-Command -ScriptBlock { Get-Job | Receive-Job } -Session $se

Handles  NPM(K)    PM(K)      WS(K)     CPU(s)     Id  SI ProcessName                                                                 PSComputerName
-------  ------    -----      -----     ------     --  -- -----------                                                                 --------------
     30       2      660       2256      0.000   3488     conhost                                                                     WIN-J9KO348JQVU
    538       6     1264       4224      6.552    332     csrss                                                                       WIN-J9KO348JQVU
    204       7     9900       7844     22.558    396     csrss                                                                       WIN-J9KO348JQVU
    188       8     2928       8648     11.560   1908     dllhost                                                                     WIN-J9KO348JQVU
    116       6    36584      35968  8,268.271   2208     dwm                                                                         WIN-J9KO348JQVU
    807      28    32868      59380     62.166   2240     explorer                                                                    WIN-J9KO348JQVU
      0       0        0         24                 0     Idle                                                                        WIN-J9KO348JQVU
    622      10     2988       8188      5.257    500     lsass                                                                       WIN-J9KO348JQVU
    139       4     1216       3020      0.281    508     lsm                                                                         WIN-J9KO348JQVU
    143       9     2440       6252      0.265   2016     msdtc                                                                       WIN-J9KO348JQVU
    253      11    22232      32532      1.856   2748     powershell                                                                  WIN-J9KO348JQVU
    602      16    22056      25588      6.614   2536     SearchIndexer                                                               WIN-J9KO348JQVU
    208       7     3804       6736      9.656    492     services                                                                    WIN-J9KO348JQVU
     29       1      220        736      0.343    256     smss                                                                        WIN-J9KO348JQVU
    323      12     5056      11128      0.499   1256     spoolsv                                                                     WIN-J9KO348JQVU
    150       4     4228       8000     11.060   3240     sppsvc                                                                      WIN-J9KO348JQVU
    353       7     2688       7004      2.371    600     svchost                                                                     WIN-J9KO348JQVU
    265       9     2684       6100      1.654    700     svchost                                                                     WIN-J9KO348JQVU
    528      14    14144      14924      9.656    748     svchost                                                                     WIN-J9KO348JQVU
    343       9     2932       8364      2.293    848     svchost                                                                     WIN-J9KO348JQVU
    972      26    13888      25536     47.284    892     svchost                                                                     WIN-J9KO348JQVU
    814      19     7412      14292     16.505   1036     svchost                                                                     WIN-J9KO348JQVU
    454      18     9064      12392     23.369   1160     svchost                                                                     WIN-J9KO348JQVU
    304      25     8100       9572      2.418   1292     svchost                                                                     WIN-J9KO348JQVU
     97       7     1196       4272      0.187   1808     svchost                                                                     WIN-J9KO348JQVU
    285      13     4120       8752      7.301   2752     svchost                                                                     WIN-J9KO348JQVU
    348      35   145304      38772     20.967   3276     svchost                                                                     WIN-J9KO348JQVU
    525       0       44       1000                 4     System                                                                      WIN-J9KO348JQVU
    200      10     6784       7512      0.686   2152     taskhost                                                                    WIN-J9KO348JQVU
     85       5     4960       8936      0.250   1440     VGAuthService                                                               WIN-J9KO348JQVU
     53       3      816       3232      0.078    660     vmacthlp                                                                    WIN-J9KO348JQVU
    288      12     9316      16732    837.429   1492     vmtoolsd                                                                    WIN-J9KO348JQVU
    175       9     6904      15524    220.117   2340     vmtoolsd                                                                    WIN-J9KO348JQVU
     78       5      984       3764      0.359    384     wininit                                                                     WIN-J9KO348JQVU
    115       4     1656       5116      0.671    432     winlogon                                                                    WIN-J9KO348JQVU
    202       7     7184      11924     24.383    376     WmiPrvSE                                                                    WIN-J9KO348JQVU
    238       8     3636       4360     14.134   2624     wmpnetwk                                                                    WIN-J9KO348JQVU
    266      12    21748      31724      0.530   1144     wsmprovhost                                                                 WIN-J9KO348JQVU&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Remote</title><link href="http://localhost:4000/technique/powershell/2017/08/31/remote.html" rel="alternate" type="text/html" title="Remote" /><published>2017-08-31T17:32:00+09:00</published><updated>2017-08-31T17:32:00+09:00</updated><id>http://localhost:4000/technique/powershell/2017/08/31/remote</id><content type="html" xml:base="http://localhost:4000/technique/powershell/2017/08/31/remote.html">&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;PowerShell을 이용해서 다른 컴퓨터의 정보를 가져올 수 있습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Get-Help *remote*&lt;/code&gt;를 입력합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\WINDOWS\system32&amp;gt; Get-Help *remote*

Name                              Category  Module                    Synopsis
----                              --------  ------                    --------
Enable-VMRemoteFXPhysicalVideo... Cmdlet    Hyper-V                   Enable-VMRemoteFXPhysicalVideoAdapter...
Add-VMRemoteFx3dVideoAdapter      Cmdlet    Hyper-V                   Add-VMRemoteFx3dVideoAdapter...
Remove-VMRemoteFx3dVideoAdapter   Cmdlet    Hyper-V                   Remove-VMRemoteFx3dVideoAdapter...
Set-VMRemoteFx3dVideoAdapter      Cmdlet    Hyper-V                   Set-VMRemoteFx3dVideoAdapter...
Get-VMRemoteFXPhysicalVideoAda... Cmdlet    Hyper-V                   Get-VMRemoteFXPhysicalVideoAdapter...
Disable-VMRemoteFXPhysicalVide... Cmdlet    Hyper-V                   Disable-VMRemoteFXPhysicalVideoAdapter...
Get-VMRemoteFx3dVideoAdapter      Cmdlet    Hyper-V                   Get-VMRemoteFx3dVideoAdapter...
about_Remote                      HelpFile                            Describes how to run remote commands in Windows PowerShell.
about_Remote_Disconnected_Sess... HelpFile                            Explains how to disconnect from and reconnect to a PSSession
about_Remote_FAQ                  HelpFile                            Contains questions and answers about running remote commands
about_Remote_Jobs                 HelpFile                            Describes how to run background jobs on remote computers.
about_Remote_Output               HelpFile                            Describes how to interpret and format the output of remote commands.
about_Remote_Requirements         HelpFile                            Describes the system requirements and configuration requirements for
about_Remote_Troubleshooting      HelpFile                            Describes how to troubleshoot remote operations in Windows PowerShell.
about_Remote_Variables            HelpFile                            Explains how to use local and remote variables in remote&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;cmdlet에서 인자 값으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;computername&lt;/code&gt;을 사용하는 명령어를 찾아봅시다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\WINDOWS\system32&amp;gt; Get-Command -CommandType cmdlet -ParameterName Computername

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Add-Computer                                       3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Clear-EventLog                                     3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Connect-PSSession                                  3.0.0.0    Microsoft.PowerShell.Core
Cmdlet          Connect-WSMan                                      3.0.0.0    Microsoft.WSMan.Management
Cmdlet          Disconnect-WSMan                                   3.0.0.0    Microsoft.WSMan.Management
Cmdlet          Enter-PSSession                                    3.0.0.0    Microsoft.PowerShell.Core
Cmdlet          Get-EventLog                                       3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Get-HotFix                                         3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Get-Process                                        3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Get-PSSession                                      3.0.0.0    Microsoft.PowerShell.Core
Cmdlet          Get-Service                                        3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Get-WmiObject                                      3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Get-WSManInstance                                  3.0.0.0    Microsoft.WSMan.Management
Cmdlet          Invoke-Command                                     3.0.0.0    Microsoft.PowerShell.Core
Cmdlet          Invoke-WmiMethod                                   3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Invoke-WSManAction                                 3.0.0.0    Microsoft.WSMan.Management
Cmdlet          Limit-EventLog                                     3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          New-EventLog                                       3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          New-PSSession                                      3.0.0.0    Microsoft.PowerShell.Core
Cmdlet          New-WSManInstance                                  3.0.0.0    Microsoft.WSMan.Management
Cmdlet          Receive-Job                                        3.0.0.0    Microsoft.PowerShell.Core
Cmdlet          Receive-PSSession                                  3.0.0.0    Microsoft.PowerShell.Core
Cmdlet          Register-WmiEvent                                  3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Remove-Computer                                    3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Remove-EventLog                                    3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Remove-PSSession                                   3.0.0.0    Microsoft.PowerShell.Core
Cmdlet          Remove-WmiObject                                   3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Remove-WSManInstance                               3.0.0.0    Microsoft.WSMan.Management
Cmdlet          Rename-Computer                                    3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Restart-Computer                                   3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Send-MailMessage                                   3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Set-Service                                        3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Set-WmiInstance                                    3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Set-WSManInstance                                  3.0.0.0    Microsoft.WSMan.Management
Cmdlet          Show-EventLog                                      3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Stop-Computer                                      3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Test-Connection                                    3.1.0.0    Microsoft.PowerShell.Management
Cmdlet          Test-WSMan                                         3.0.0.0    Microsoft.WSMan.Management
Cmdlet          Write-EventLog                                     3.1.0.0    Microsoft.PowerShell.Management&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;여기서 현재 컴퓨터의 HotFix 내용을 알고 싶다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Get-HotFix&lt;/code&gt;를 입력하면 결과가 나타납니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\WINDOWS\system32&amp;gt; Get-HotFix

Source        Description      HotFixID      InstalledBy          InstalledOn
------        -----------      --------      -----------          -----------
K3Y6REAK9778  Update           KB4022405     NT AUTHORITY\SYSTEM  2017. 8. 7. 오전 12:00:00
K3Y6REAK9778  Security Update  KB4034662     NT AUTHORITY\SYSTEM  2017. 8. 9. 오전 12:00:00
K3Y6REAK9778  Security Update  KB4034674     NT AUTHORITY\SYSTEM  2017. 8. 13. 오전 12:0...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;windows 7&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;windows 10&lt;/code&gt;의 HotFix 내용을 가져와 출력하는 방법을 알아보겠습니다.&lt;/p&gt;

&lt;p&gt;먼저 &lt;code class=&quot;highlighter-rouge&quot;&gt;windows 10&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Get-HotFix&lt;/code&gt;를 하면 아래와 같이 출력됩니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;* Windows 10 *
Source        Description      HotFixID      InstalledBy          InstalledOn
------        -----------      --------      -----------          -----------
K3Y6REAK9778  Update           KB4022405     NT AUTHORITY\SYSTEM  2017. 8. 7. 오전 12:00:00
K3Y6REAK9778  Security Update  KB4034662     NT AUTHORITY\SYSTEM  2017. 8. 9. 오전 12:00:00
K3Y6REAK9778  Security Update  KB4034674     NT AUTHORITY\SYSTEM  2017. 8. 13. 오전 12:0...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;그리고 다른 컴퓨터에서 원격으로 가져오는 것이기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;관리자 권한&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Set-Item WSMAN:\localhost\client\trustedhosts -Value *&lt;/code&gt;를 입력한 뒤 명령을 실행합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\WINDOWS\system32&amp;gt; Set-Item WSMAN:\localhost\client\trustedhosts -Value *

WinRM 보안 구성
이 명령에서 WinRM 클라이언트에 대한 TrustedHosts 목록을 수정합니다. TrustedHosts 목록에 있는 컴퓨터가 인증되지 않을 수 있으며 클라이언트에서 자격 증명 정보를 이러한 컴퓨터에 보낼 수도 있습니다. 이 목록을
수정하시겠습니까?
[Y] 예(Y)  [N] 아니요(N)  [S] 일시 중단(S)  [?] 도움말 (기본값은 &quot;Y&quot;): Y&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;windows 7&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Get-HotFix -Computername [Windows 10 Computer 이름] -Credential [Windows 10 계정]&lt;/code&gt;를 입력해 줍니다. 그러면 &lt;code class=&quot;highlighter-rouge&quot;&gt;자격 증명 요청&lt;/code&gt;이 나오면 해당 명령어를 실행하는 계정의 비밀번호를 입력합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;* Windows 7 *
PS C:\Users\k3y6reak&amp;gt; Get-HotFix -Computername [Windows 10 Computer 이름] -Credential [Windows 10 계정]

Source        Description      HotFixID      InstalledBy          InstalledOn
------        -----------      --------      -----------          -----------
K3Y6REAK9778  Update           KB4022405     NT AUTHORITY\SYSTEM  2017-08-07 오전 12:00:00
K3Y6REAK9778  Security Update  KB4034662     NT AUTHORITY\SYSTEM  2017-08-09 오전 12:00:00
K3Y6REAK9778  Security Update  KB4034674     NT AUTHORITY\SYSTEM  2017-08-13 오전 12:00:00&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;반대로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows 10&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows 7&lt;/code&gt;의 실행되고 있는 프로세스 목록을 가져오도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Invoke-Command -ScriptBlock {Get-Process} -ComputerName [Windows 7 Computer 이름] -Credential [Windows 7 계정]&lt;/code&gt;를 입력합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;* Windows 10 *
PS C:\WINDOWS\system32&amp;gt; Invoke-Command -ScriptBlock {$env:computername} -ComputerName WIN-J9KO348JQVU -Credential k3y6reak
[WIN-J9KO348JQVU] 다음 오류 때문에 원격 서버 WIN-J9KO348JQVU에 연결하지 못했습니다. 클라이언트가 요청에 지정된 대상에 연결할 수 없습니다. 대상에서 서비스가 실행되고 요청을 수락하고 있는지 확인하십시오. 대상에서
 실행 중인 WS-Management 서비스에 대한 로그 및 설명서를 참조하십시오. 대부분의 경우 IIS 또는 WinRM입니다. 대상이 WinRM 서비스인 경우 대상에서 &quot;winrm quickconfig&quot; 명령을 사용하여 WinRM 서비스를 분석하고 구성하십
시오. 자세한 내용은 about_Remote_Troubleshooting 도움말 항목을 참조하십시오.
    + CategoryInfo          : OpenError: (WIN-J9KO348JQVU:String) [], PSRemotingTransportException
    + FullyQualifiedErrorId : CannotConnect,PSSessionStateBroken&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위와 같은 에러 메시지가 출력된다면 Windows 7에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;관리자 권한&lt;/code&gt;으로 PowerShell을 실행시킨 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;Enable-PSRemoting -force&lt;/code&gt;를 입력합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;* Windows 7 *
PS C:\Windows\system32&amp;gt; Enable-PSRemoting -force
이 컴퓨터에서 요청을 수신하도록 WinRM이 이미 설정되었습니다.
원격 관리를 위한 WinRM이 업데이트되었습니다.
이 컴퓨터에서 모든 IP 주소로 WS-Man 요청을 수락하려면 HTTP://*에서 WinRM 수신기를 만드십시오.
WinRM 방화벽 예외를 사용합니다.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;그 후 다시 &lt;code class=&quot;highlighter-rouge&quot;&gt;Invoke-Command -ScriptBlock {Get-Process} -ComputerName WIN-J9KO348JQVU -Credential k3y6reak&lt;/code&gt;를 입력합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;* Windows 10 *
PS C:\WINDOWS\system32&amp;gt; Invoke-Command -ScriptBlock {Get-Process} -ComputerName [Windows 7 Computer 이름] -Credential [Windows 7 계정]

Handles  NPM(K)    PM(K)      WS(K)     CPU(s)     Id  SI ProcessName                                                                  PSComputerName
-------  ------    -----      -----     ------     --  -- -----------                                                                  --------------
    126       5    14996      13952              2504     audiodg                                                                      WIN-J9KO348JQVU
     89       5     4328      10484      0.530   1572     conhost                                                                      WIN-J9KO348JQVU
     89       5     4292      10356      0.047   3980     conhost                                                                      WIN-J9KO348JQVU
    579       6     1288       3012      1.076    360     csrss                                                                        WIN-J9KO348JQVU
    257       8     9716       7684     11.934   3336     csrss                                                                        WIN-J9KO348JQVU
     83       4      912       3624      0.031   1916     dllhost                                                                      WIN-J9KO348JQVU
    188       8     3076       9080      0.031   3128     dllhost                                                                      WIN-J9KO348JQVU
    116       6    42392      49896      1.404   3608     dwm                                                                          WIN-J9KO348JQVU
    840      27    30936      61676     13.416   3620     explorer                                                                     WIN-J9KO348JQVU
      0       0        0         24                 0     Idle                                                                         WIN-J9KO348JQVU
    881      10     2952       6820      3.697    508     lsass                                                                        WIN-J9KO348JQVU
    144       4     1264       2112      0.000    516     lsm                                                                          WIN-J9KO348JQVU
    146       9     2400       3392      1.170   2188     msdtc                                                                        WIN-J9KO348JQVU
    688      50    33608      43892      0.780    492     powershell                                                                   WIN-J9KO348JQVU
    600      15    27680      46684      0.905    856     powershell                                                                   WIN-J9KO348JQVU
    764      18    22384      23768      4.711   1864     SearchIndexer                                                                WIN-J9KO348JQVU
    212       7     3792       6352      2.558    500     services                                                                     WIN-J9KO348JQVU
     29       1      220        528      0.156    280     smss                                                                         WIN-J9KO348JQVU
    325      12     5036       5032      0.936   1408     spoolsv                                                                      WIN-J9KO348JQVU
    152       4     6100       7480      2.933   3152     sppsvc                                                                       WIN-J9KO348JQVU
    100       7     1192       4244      0.062    352     svchost                                                                      WIN-J9KO348JQVU
    371       7     3252       6096     14.539    652     svchost                                                                      WIN-J9KO348JQVU
    298       9     2968       5904      0.733    744     svchost                                                                      WIN-J9KO348JQVU
    536      14    14200      12192      1.872    796     svchost                                                                      WIN-J9KO348JQVU
    364      10     3232       5308      7.457    916     svchost                                                                      WIN-J9KO348JQVU
   1206      31    21624      32616     45.318    960     svchost                                                                      WIN-J9KO348JQVU
    820      21     6752      12672      1.248   1104     svchost                                                                      WIN-J9KO348JQVU
    658      75    57968      33608      4.524   1176     svchost                                                                      WIN-J9KO348JQVU
    333      25     9308       8308      0.920   1468     svchost                                                                      WIN-J9KO348JQVU
    280      13     3908       7924      0.312   3064     svchost                                                                      WIN-J9KO348JQVU
    368      35   149724      58524    181.273   3188     svchost                                                                      WIN-J9KO348JQVU
    541       0       48       1076                 4     System                                                                       WIN-J9KO348JQVU
    214      10     6772       6664      1.201   3560     taskhost                                                                     WIN-J9KO348JQVU
     85       5     4960       2788      0.234   1752     VGAuthService                                                                WIN-J9KO348JQVU
     54       3      824       1952      0.031    712     vmacthlp                                                                     WIN-J9KO348JQVU
    286      12     8268       8920     29.578   1812     vmtoolsd                                                                     WIN-J9KO348JQVU
    210      10     8064      12108     20.389   3724     vmtoolsd                                                                     WIN-J9KO348JQVU
     76       5      988       1832      0.452    412     wininit                                                                      WIN-J9KO348JQVU
    117       5     1724       3628      0.452   3360     winlogon                                                                     WIN-J9KO348JQVU
    203       7     7328      10260      4.930    860     WmiPrvSE                                                                     WIN-J9KO348JQVU
    207       7     2628       3580      0.265   3424     wmpnetwk                                                                     WIN-J9KO348JQVU
    218      11    23216      32516      4.992   2392     wsmprovhost                                                                  WIN-J9KO348JQVU&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이렇게 다른 컴퓨터의 정보를 가져올 수 있습니다. 또한 SSH 처럼 사용할 수 있는데, &lt;code class=&quot;highlighter-rouge&quot;&gt;PSSession&lt;/code&gt;을 사용합니다.&lt;/p&gt;

&lt;p&gt;먼저 새로운 PSSession을 만들어야 합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;New-PSSession&lt;/code&gt;명령어를 사용합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\WINDOWS\system32&amp;gt; New-PSSession -ComputerName WIN-J9KO348JQVU -Credential k3y6reak

 Id Name            ComputerName    ComputerType    State         ConfigurationName     Availability
 -- ----            ------------    ------------    -----         -----------------     ------------
  1 WinRM1          WIN-J9KO348JQVU RemoteMachine   Opened        Microsoft.PowerShell     Available&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위와 같이 연결이 된 후에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Enter-PSSession&lt;/code&gt;을 이용하여 접속합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\WINDOWS\system32&amp;gt; Enter-PSSession -id 1
[WIN-J9KO348JQVU]: PS C:\Users\k3y6reak\Documents&amp;gt; cd \
[WIN-J9KO348JQVU]: PS C:\&amp;gt; ls


    디렉터리: C:\


Mode                LastWriteTime     Length Name
----                -------------     ------ ----
d----        2009-07-14  오전 11:37            PerfLogs

d-r--        2017-08-25   오후 1:30            Program Files

d-r--        2017-08-30   오후 8:16            Users

d----        2017-08-25   오후 1:31            Windows

-a---        2009-06-11   오전 6:42         24 autoexec.bat

-a---        2009-06-11   오전 6:42         10 config.sys&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Enter-PSSession&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;-id&lt;/code&gt; 옵션 값은 &lt;code class=&quot;highlighter-rouge&quot;&gt;New-PSSession&lt;/code&gt;을 통해서 만들어진 &lt;code class=&quot;highlighter-rouge&quot;&gt;Id&lt;/code&gt;값입니다.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Modules</title><link href="http://localhost:4000/technique/powershell/2017/08/22/modules.html" rel="alternate" type="text/html" title="Modules" /><published>2017-08-22T20:23:00+09:00</published><updated>2017-08-22T20:23:00+09:00</updated><id>http://localhost:4000/technique/powershell/2017/08/22/modules</id><content type="html" xml:base="http://localhost:4000/technique/powershell/2017/08/22/modules.html">&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;PowerShell에서 Module에 관한 명령어를 알아보기 위해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Get-Help *module*&lt;/code&gt;을 입력합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak&amp;gt; Get-Help *module*

Name                              Category  Module                    Synopsis
----                              --------  ------                    --------
ImportSystemModules               Function                            ...
Export-ModuleMember               Cmdlet    Microsoft.PowerShell.Core Specifies the module members that are exported.
Get-Module                        Cmdlet    Microsoft.PowerShell.Core Gets the modules that have been imported or that can be imported into the current session.
Import-Module                     Cmdlet    Microsoft.PowerShell.Core Adds modules to the current session.
New-Module                        Cmdlet    Microsoft.PowerShell.Core Creates a new dynamic module that exists only in memory.
New-ModuleManifest                Cmdlet    Microsoft.PowerShell.Core Creates a new module manifest.
Remove-Module                     Cmdlet    Microsoft.PowerShell.Core Removes modules from the current session.
Test-ModuleManifest               Cmdlet    Microsoft.PowerShell.Core Verifies that a module manifest file accurately describes the contents of a module.
InModuleScope                     Function  Pester                    ...
Uninstall-Module                  Function  PowerShellGet             ...
Install-Module                    Function  PowerShellGet             ...
Publish-Module                    Function  PowerShellGet             ...
Update-ModuleManifest             Function  PowerShellGet             ...
Save-Module                       Function  PowerShellGet             ...
Update-Module                     Function  PowerShellGet             ...
Get-InstalledModule               Function  PowerShellGet             ...
Find-Module                       Function  PowerShellGet             ...
about_Modules                     HelpFile                            Explains how to install, import, and use Windows PowerShell modules.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;주로 사용하게 될 명령어는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Import-module&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;Remove-module&lt;/code&gt; 입니다. 모듈을 사용하고자 할 때는 Import-module을 사용하고 모듈을 해제 하고자할 때는 Remove-module을 사용합니다.&lt;/p&gt;

&lt;p&gt;PowerShell에서 모듈을 사용하기 위해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;$env:PSModulePath&lt;/code&gt;를 입력합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak&amp;gt; $env:PSModulePath
C:\Users\k3y6reak\Documents\WindowsPowerShell\Modules;C:\Program Files\WindowsPowerShell\Modules;C:\WINDOWS\system32\WindowsPowerShell\v1.0\Modules&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위 결과를 보면 모듈에 대한 경로가 나타나게 된다. 여기서 &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Users\k3y6reak\Documents\WindowsPowerShell\Modules&lt;/code&gt;로 이동하면 WindowsPowerShell 폴더가 없다는 에러 메시지가 나타난다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak&amp;gt; cd C:\Users\k3y6reak\Documents\WindowsPowerShell\Modules
cd : 'C:\Users\k3y6reak\Documents\WindowsPowerShell\Modules' 경로는 존재하지 않으므로 찾을 수 없습니다.
위치 줄:1 문자:1
+ cd C:\Users\k3y6reak\Documents\WindowsPowerShell\Modules
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (C:\Users\k3y6re...erShell\Modules:String) [Set-Location], ItemNotFoundException
    + FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.SetLocationCommand

PS C:\Users\k3y6reak&amp;gt; cd C:\Users\k3y6reak\Documents\
PS C:\Users\k3y6reak\Documents&amp;gt; mkdir WindowsPowerShell


    디렉터리: C:\Users\k3y6reak\Documents


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
d-----   2017. 8. 24.  오전 11:23                WindowsPowerShell


PS C:\Users\k3y6reak\Documents&amp;gt; cd WindowsPowerShell
PS C:\Users\k3y6reak\Documents\WindowsPowerShell&amp;gt; mkdir Modules


    디렉터리: C:\Users\k3y6reak\Documents\WindowsPowerShell


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
d-----   2017. 8. 24.  오전 11:24                Modules&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위와 같이 해당 디렉토리를 생성하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Modules 디렉토리&lt;/code&gt;에서 모듈을 저장하면 된다.&lt;/p&gt;

&lt;p&gt;그렇다면 PowerShell에서 사용하는 모듈을 한번 만들어 보겠습니다.&lt;/p&gt;

&lt;p&gt;PowerShell script는 &lt;code class=&quot;highlighter-rouge&quot;&gt;.ps1&lt;/code&gt; 확장자를 갖고있고, PowerShell module은 &lt;code class=&quot;highlighter-rouge&quot;&gt;.psm1&lt;/code&gt; 확장자를 갖고 있습니다.&lt;/p&gt;

&lt;p&gt;아래 &lt;code class=&quot;highlighter-rouge&quot;&gt;DelFile.psm1&lt;/code&gt; 코드를 작성합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;function DelFile
{
    [CmdletBinding( SupportsShouldProcess = $true )] 
    param ([Parameter()]$FilePath)

    Write-Verbose &quot;Delete $FilePath&quot;
    
    if($PSCmdlet.ShouldProcess(&quot;$FilePath&quot;, &quot;Deleting File permanently&quot;))
    {
        Remove-Item $FilePath
    }

}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak\Documents\WindowsPowerShell\Modules&amp;gt; cp C:\Users\k3y6reak\Desktop\DelFile.psm1 .
PS C:\Users\k3y6reak\Documents\WindowsPowerShell\Modules&amp;gt; ls


    디렉터리: C:\Users\k3y6reak\Documents\WindowsPowerShell\Modules


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----   2017. 8. 24.   오후 1:34            284 DelFile.psm1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Modules 디렉토리에 DelFile.psm1을 복사합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak\Documents\WindowsPowerShell\Modules&amp;gt; Import-Module .\DelFile.psm1
PS C:\Users\k3y6reak\Documents\WindowsPowerShell\Modules&amp;gt; Get-Command -Module DelFile

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Function        DelFile                                            0.0        DelFile


PS C:\Users\k3y6reak\Documents\WindowsPowerShell\Modules&amp;gt; Get-Module

ModuleType Version    Name                                ExportedCommands
---------- -------    ----                                ----------------
Script     0.0        DelFile                             DelFile
Manifest   3.1.0.0    Microsoft.PowerShell.Management     {Add-Computer, Add-Content, Checkpoint-Computer, Clear-Content...}
Manifest   3.1.0.0    Microsoft.PowerShell.Utility        {Add-Member, Add-Type, Clear-Variable, Compare-Object...}
Script     1.2        PSReadline                          {Get-PSReadlineKeyHandler, Get-PSReadlineOption, Remove-PSReadlineKeyHandler, Set-PSReadlineKeyHandler...}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Import-Module&lt;/code&gt;을 이용하여 모듈을 추가할 수 있고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Get-Module&lt;/code&gt;을 이용하여 사용되는 모듈을 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;해당 디렉토리에 &lt;code class=&quot;highlighter-rouge&quot;&gt;test.txt&lt;/code&gt;파일을 생성한 후 추가한 DelFile 모듈을 사용해 보겠습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak\Documents\WindowsPowerShell\Modules&amp;gt; ls


    디렉터리: C:\Users\k3y6reak\Documents\WindowsPowerShell\Modules


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----   2017. 8. 24.   오후 1:34            284 DelFile.psm1
-a----   2017. 8. 24.   오후 1:45              0 test.txt


PS C:\Users\k3y6reak\Documents\WindowsPowerShell\Modules&amp;gt; DelFile C:\Users\k3y6reak\Documents\WindowsPowerShell\Modules\test.txt
PS C:\Users\k3y6reak\Documents\WindowsPowerShell\Modules&amp;gt; ls


    디렉터리: C:\Users\k3y6reak\Documents\WindowsPowerShell\Modules


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----   2017. 8. 24.   오후 1:34            284 DelFile.psm1


PS C:\Users\k3y6reak\Documents\WindowsPowerShell\Modules&amp;gt; Remove-Module DelFile
PS C:\Users\k3y6reak\Documents\WindowsPowerShell\Modules&amp;gt; Get-Module

ModuleType Version    Name                                ExportedCommands
---------- -------    ----                                ----------------
Manifest   3.1.0.0    Microsoft.PowerShell.Management     {Add-Computer, Add-Content, Checkpoint-Computer, Clear-Content...}
Manifest   3.1.0.0    Microsoft.PowerShell.Utility        {Add-Member, Add-Type, Clear-Variable, Compare-Object...}
Script     1.2        PSReadline                          {Get-PSReadlineKeyHandler, Get-PSReadlineOption, Remove-PSReadlineKeyHandler, Set-PSReadlineKeyHandler...}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DelFile 파일경로&lt;/code&gt;를 이용하여 test.txt가 삭제된 것을 확인할 수 있으며, 해당 모듈을 사용하지 않을 때는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Remove-Module 모듈명&lt;/code&gt;을 이용해 제거할 수 있습니다.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Functions</title><link href="http://localhost:4000/technique/powershell/2017/08/08/Functios.html" rel="alternate" type="text/html" title="Functions" /><published>2017-08-08T20:29:00+09:00</published><updated>2017-08-08T20:29:00+09:00</updated><id>http://localhost:4000/technique/powershell/2017/08/08/Functios</id><content type="html" xml:base="http://localhost:4000/technique/powershell/2017/08/08/Functios.html">&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;PowerShell에서 함수를 사용하는 방법에 대해서 알아보겠습니다.&lt;/p&gt;

&lt;p&gt;먼저 스크립트를 작성할 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;PowerShell ISE&lt;/code&gt;를 이용하여 작성하는 방법이 있고, 앞서 Execution Policy에서 설명한 것 처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;에디터&lt;/code&gt;를 이용하는 방법이 있습니다.&lt;/p&gt;

&lt;p&gt;PowerShell ISE에서 스크립트를 작성할 때 아래 그림의 &lt;code class=&quot;highlighter-rouge&quot;&gt;스크립트&lt;/code&gt;를 누른 후 스크립트를 작성할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/powershell/functions/powershell_ise.png&quot; alt=&quot;powershell_ise&quot; /&gt;&lt;/p&gt;

&lt;p&gt;마찬가지로 &lt;code class=&quot;highlighter-rouge&quot;&gt;관리자 권한&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Set-Execution Byass&lt;/code&gt;를 실행해야 스크립트를 실행할 수 있습니다.&lt;/p&gt;

&lt;p&gt;스크립트를 작성하는 방법에 대해서 알았으니 함수에 대해서 알아보겠습니다.&lt;/p&gt;

&lt;p&gt;PowerShell에서 함수를 작성하는 방법은 &lt;code class=&quot;highlighter-rouge&quot;&gt;function Name () {}&lt;/code&gt; 꼴로 작성합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;dot-sourcing&quot;&gt;Dot Sourcing&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;function add()
{
  1+3
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위와 같이 코드를 작성한 후 ISE에서 실행을 하면 아래와 같이 에러가 발생합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak\Desktop&amp;gt; .\add.ps1

PS C:\Users\k3y6reak\Desktop&amp;gt; add
add : 'add' 용어가 cmdlet, 함수, 스크립트 파일 또는 실행할 수 있는 프로그램 이름으로 인식되지 않습니다. 이름이 정확한지 확인하고 경로
가 포함된 경우 경로가 올바른지 검증한 다음 다시 시도하십시오.
위치 줄:1 문자:1
+ add
+ ~~~
    + CategoryInfo          : ObjectNotFound: (add:String) [], CommandNotFoundExcept 
   ion
    + FullyQualifiedErrorId : CommandNotFoundException&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;스크립트 파일 자체를 실행하면 아무런 결과도 나오지 않고 함수명을 바로 호출하면 에러가 발생합니다.&lt;/p&gt;

&lt;p&gt;여기서 에러를 발생하지 않고 실행하는 방법이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Dot Sourcing&lt;/code&gt;입니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak\Desktop&amp;gt; . .\add.ps1

PS C:\Users\k3y6reak\Desktop&amp;gt; add
4&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Dot Sourcing&lt;/code&gt;은 위 코드를 살펴보면 실행하고자 스크립트 앞에 &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;을 붙여 한 번 실행한 뒤 함수명으로 바로 실행이 가능하도록 하는 것 입니다.&lt;/p&gt;

&lt;p&gt;쉽게 말하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;해당 스크립트의 내용을 현재 쉘에 로드해 둔 것&lt;/code&gt;이라 생각하면 됩니다.&lt;/p&gt;

&lt;p&gt;자 이제, 함수를 작성하는 방법은 알았으니 함수의 본질로 넘어가 보도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;함수를 사용하는 건 &lt;code class=&quot;highlighter-rouge&quot;&gt;인자 값&lt;/code&gt;을 넘겨 &lt;code class=&quot;highlighter-rouge&quot;&gt;연산&lt;/code&gt;을 하는 것 입니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;parameter&quot;&gt;Parameter&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;function paramadd ($num1, $num2){
    $num1 + $num2
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위와 같이 paramadd 라는 함수를 작성 한 후 아래와 같이 실행해 봅시다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak\Desktop&amp;gt; . .\paramadd.ps1

PS C:\Users\k3y6reak\Desktop&amp;gt; paramadd 1 2
3

PS C:\Users\k3y6reak\Desktop&amp;gt; paramadd 1 &quot;2&quot;
3

PS C:\Users\k3y6reak\Desktop&amp;gt; paramadd 1 &quot;b&quot;
값 &quot;b&quot;을(를) &quot;System.Int32&quot; 유형으로 변환할 수 없습니다. 오류: &quot;입력 문자열의 형식이 잘못되었습니다.&quot;
위치 C:\Users\k3y6reak\Desktop\paramadd.ps1:2 문자:5
+     $num1 + $num2
+     ~~~~~~~~~~~~~
    + CategoryInfo          : InvalidArgument: (:) [], RuntimeException
    + FullyQualifiedErrorId : InvalidCastFromStringToInteger&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;인자 값으로 1과 2를 넣어 실행한 경우 정상적으로 3이라는 결과를 출력해 줍니다.&lt;/p&gt;

&lt;p&gt;여기서 2를 문자열 “2”로 변환하여 넣은 경우도 신기하게 3이라는 결과를 출력해줍니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;숫자 형태로 이루어진 문자&lt;/code&gt;는 PowerShell에서 숫자로 변환하여 실행을 해줍니다.&lt;/p&gt;

&lt;p&gt;진짜 문자형태인 “b”를 넣었을 경우에는 에러를 발생합니다. 에러의 내용을 살펴보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;b&quot;를 &quot;System.Int32&quot;유형으로 변환할 수 없습니다.&lt;/code&gt; 라고 출력하는 것을 보아 앞의 &lt;code class=&quot;highlighter-rouge&quot;&gt;$num1의 형태가 Int32이기 때문에 이에 맞춰 변환하는 과정&lt;/code&gt;에서 에러가 발생한 것입니다.&lt;/p&gt;

&lt;p&gt;반대로 “1”과 2를 넣은 경우에는 정상적으로 실행됩니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak\Desktop&amp;gt; paramadd &quot;1&quot; 2
12&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;어떤 연산을 하는 경우 앞의 변수의 형태에 따라 뒤의 변수 형태를 변환하는 것을 알 수 있습니다.&lt;/p&gt;

&lt;p&gt;또한 인자 값을 지정하여 함수를 실행할 수도 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak\Desktop&amp;gt; paramadd -num1 1 -num2 2
3

PS C:\Users\k3y6reak\Desktop&amp;gt; paramadd -num2 1 -num1 2
3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;함수에서 사용하는 변수를 &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;과 함께 사용하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;순서에 상관없이&lt;/code&gt; 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;다음으로 함수의 인자 개수에 대해서 설명하겠습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;function overparam ($num1, $num2)
{
    $num1 + $num2
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위와 같이 overparam 함수를 작성합니다. overparam에서 사용하는 인자 값의 개수는 2개 인데 아래 실행 예제를 살펴보면 3개의 인자 값을 넣어도 에러를 발생하지 않습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak\Desktop&amp;gt; overparam 1 2
3

PS C:\Users\k3y6reak\Desktop&amp;gt; overparam 1 2 3
3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;보통 다른 언어에서는 인자 값을 맞춰 코딩을 하기 때문에 에러가 발생하는데 PowerShell의 경우 에러를 출력하지 않습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;function overparam2 ($num1, $num2){
    $num1 + $num2
    $args
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위와 같이 스크립트를 작성한 후 아래와 같이 실행해 봅시다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak\Desktop&amp;gt; . .\overparam2.ps1

PS C:\Users\k3y6reak\Desktop&amp;gt; overparam2 1 2
3

PS C:\Users\k3y6reak\Desktop&amp;gt; overparam2 1 2 3
3
3

PS C:\Users\k3y6reak\Desktop&amp;gt; overparam2 1 2 3 4
3
3
4

PS C:\Users\k3y6reak\Desktop&amp;gt; overparam2 1 2 3 4 5
3
3
4
5&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위 실행예제를 보면 인자 개수가 2개이지만 값을 3개, 4개 넣었을 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;$args&lt;/code&gt;를 통해 출력 된 다는 것을 알 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;default-value&quot;&gt;Default Value&lt;/h4&gt;

&lt;p&gt;c++에서 함수의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Default value(기본 값)&lt;/code&gt;을 지정할 수 있는데, PowerShell에서도 기본 값을 사용할 수 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;function defaultvalue($num1 = 11, $num2){
    $num1 + $num2
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak\Desktop&amp;gt; . .\defaultvalue.ps1

PS C:\Users\k3y6reak\Desktop&amp;gt; defaultvalue 1 2
3

PS C:\Users\k3y6reak\Desktop&amp;gt; defaultvalue 2
2

PS C:\Users\k3y6reak\Desktop&amp;gt; defaultvalue -num2 2
13&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;$num1의 값을 11로 기본 값으로 선언하고 실행합니다. 인자 값이 있는 경우에는 해당 값을 이용해 연산을 하지만 없는 경우 기본 값을 이용해 연산을 합니다.&lt;/p&gt;

&lt;p&gt;추가적으로 함수 내에서 사용하는 변수는 &lt;code class=&quot;highlighter-rouge&quot;&gt;지역변수&lt;/code&gt;입니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak\Desktop&amp;gt; $num1 = 11
PS C:\Users\k3y6reak\Desktop&amp;gt; function add($num1 = 2, $num2) {
&amp;gt;&amp;gt; $num1 + $num2
&amp;gt;&amp;gt; }
PS C:\Users\k3y6reak\Desktop&amp;gt; $num1
11
PS C:\Users\k3y6reak\Desktop&amp;gt; add 1 2
3
PS C:\Users\k3y6reak\Desktop&amp;gt; add -num2 2
4&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;mandatory&quot;&gt;Mandatory&lt;/h4&gt;

&lt;p&gt;다음으로는 함수의 인자의 조건에 대해서 알아보겠습니다. PowreShell에서는 인자 값에 대한 조건을 줄 수 있는데 &lt;code class=&quot;highlighter-rouge&quot;&gt;param([parameter () ], [parameter () ])&lt;/code&gt;과 같은 형식을 사용합니다. 아래 예제를 보겠습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;function paramcheck
{
    param([parameter (Mandatory = $true)]$val1, [Parameter()]$val2)

    Write-Output &quot;val1 is $val1&quot;
    Write-Output &quot;val2 is $val2&quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;소스코드를 보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Mandatory = $true&lt;/code&gt;가 작성된 것을 볼 수 있는데, &lt;code class=&quot;highlighter-rouge&quot;&gt;Mandatory&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;의무적인&lt;/code&gt;이라는 뜻으로 해당 변수에 대해서는 무조건 값이 필요하다는 것을 뜻합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak\Desktop&amp;gt; . .\paramcheck.ps1

PS C:\Users\k3y6reak\Desktop&amp;gt; paramcheck 1 2
val1 is 1
val2 is 2

PS C:\Users\k3y6reak\Desktop&amp;gt; paramcheck -val1 1 -val2 2
val1 is 1
val2 is 2

PS C:\Users\k3y6reak\Desktop&amp;gt; paramcheck -val1 1
val1 is 1
val2 is 

PS C:\Users\k3y6reak\Desktop&amp;gt; paramcheck -val2 2
cmdlet paramcheck(명령 파이프라인 위치 1)
다음 매개 변수에 대한 값을 제공하십시오.
val1: 1
val1 is 1
val2 is 2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위 실행 예제를 보면 알 수 있듯이 &lt;code class=&quot;highlighter-rouge&quot;&gt;val2&lt;/code&gt;에 대한 값만 전달하는 경우 사용자마다 다르지만 에러를 발생하거나 위 경우처럼 val1에 대한 값을 요구하게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;position&quot;&gt;Position&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Position&lt;/code&gt;에 대해서 알아보겠습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;function paramcheck
{
    param([parameter (Mandatory = $true, Position = 1)]$val1, [Parameter(Position = 0)]$val2)

    Write-Output &quot;val1 is $val1&quot;
    Write-Output &quot;val2 is $val2&quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Position&lt;/code&gt;은 각 인자 값에 대한 &lt;code class=&quot;highlighter-rouge&quot;&gt;순서&lt;/code&gt;를 지정하는 것 입니다. 아래 실행 예제를 보도록 하겠습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak\Desktop&amp;gt; . .\paramcheck.ps1

PS C:\Users\k3y6reak\Desktop&amp;gt; paramcheck 1 2
val1 is 2
val2 is 1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;두 번째 인자 값인 &lt;code class=&quot;highlighter-rouge&quot;&gt;val2&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Posiotion = 0&lt;/code&gt;으로 되어있고 &lt;code class=&quot;highlighter-rouge&quot;&gt;val1&lt;/code&gt;은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Position = 1&lt;/code&gt;로 되어있기 때문에 순서 상 val2가 먼저 값을 받게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;valuefrompipeline&quot;&gt;ValueFromPipeline&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ValueFromPipeline&lt;/code&gt;에 대해서 알아보겠습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;function paramcheck
{
    param([parameter (Mandatory = $true, Position = 0, ValueFromPipeline = $true)]$val1, [Parameter(Position = 1)]$val2)

    Write-Output &quot;val1 is $val1&quot;
    Write-Output &quot;val2 is $val2&quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ValueFromPipeline&lt;/code&gt;은 Pipeline을 통해 함수의 인자 값을 넣어줄 수 있는 방법을 말합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak\Desktop&amp;gt; . .\paramcheck.ps1

PS C:\Users\k3y6reak\Desktop&amp;gt; 33 | paramcheck
val1 is 33
val2 is &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;allownull&quot;&gt;AllowNull&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AllowNull&lt;/code&gt;에 대해서 알아보겠습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;function paramcheck
{
    param([parameter (Mandatory = $true, Position = 0, ValueFromPipeline = $true)]$val1, [Parameter(Position = 1)]$val2)

    Write-Output &quot;val1 is $val1&quot;
    Write-Output &quot;val2 is $val2&quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위 예제에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;val1&lt;/code&gt;에 대한 값을 &lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt;로 하고 실행하면 아래와 같이 에러가 발생합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak\Desktop&amp;gt; . .\paramcheck.ps1

PS C:\Users\k3y6reak\Desktop&amp;gt; paramcheck -val1 $NULL -val2 2
paramcheck : 'val1' 매개 변수가 null이므로 인수를 해당 매개 변수에 바인딩할 수 없습니다.
위치 줄:1 문자:18
+ paramcheck -val1 $NULL -val2 2
+                  ~~~~~
    + CategoryInfo          : InvalidData: (:) [paramcheck], ParameterBindingValidat 
   ionException
    + FullyQualifiedErrorId : ParameterArgumentValidationErrorNullNotAllowed,paramch 
   eck&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;function paramcheck
{
    param([parameter (Mandatory = $true, Position = 0, ValueFromPipeline = $true)] [AllowNull()]$val1, [Parameter(Position = 1)]$val2)

    Write-Output &quot;val1 is $val1&quot;
    Write-Output &quot;val2 is $val2&quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;[AllowNull()]&lt;/code&gt;를 작성한 후 실행하면 아래와 같이 에러가 발생하지 않는 것을 볼 수 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak\Desktop&amp;gt; . .\paramcheck.ps1

PS C:\Users\k3y6reak\Desktop&amp;gt; paramcheck -val1 $NULL -val2 2
val1 is 
val2 is 2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;validateset&quot;&gt;ValidateSet&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ValidateSet&lt;/code&gt;에 대해서 알아보겠습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;function paramcheck
{
    param([parameter (Mandatory = $true, Position = 0, ValueFromPipeline = $true)] [ValidateSet(1,2,3)]$val1, [Parameter(Position = 1)]$val2)

    Write-Output &quot;val1 is $val1&quot;
    Write-Output &quot;val2 is $val2&quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;paramcheck -val1&lt;/code&gt;을 입력한 뒤, &lt;code class=&quot;highlighter-rouge&quot;&gt;tab&lt;/code&gt;을 누르면 사용할 수 있는 값을 출력해 줍니다.&lt;/p&gt;

&lt;p&gt;이 외의 값을 사용하면 에러를 발생합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak\Desktop&amp;gt; . .\paramcheck.ps1

PS C:\Users\k3y6reak\Desktop&amp;gt; paramcheck -val1 3 -val2 4
val1 is 3
val2 is 4

PS C:\Users\k3y6reak\Desktop&amp;gt; paramcheck -val1 33 -val2 4
paramcheck : 'val1' 매개 변수에 대한 인수의 유효성을 검사할 수 없습니다. &quot;33&quot; 인수가 ValidateSet 특성에 지정된 &quot;1,2,
3&quot; 집합에 속하지 않습니다. 집합에 속한 인수를 제공하고 명령을 다시 시도하십시오.
위치 줄:1 문자:18
+ paramcheck -val1 33 -val2 4
+                  ~~
    + CategoryInfo          : InvalidData: (:) [paramcheck], ParameterBindingValidat 
   ionException
    + FullyQualifiedErrorId : ParameterArgumentValidationError,paramcheck&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Execution Policy</title><link href="http://localhost:4000/technique/powershell/2017/08/08/Execution_Policy.html" rel="alternate" type="text/html" title="Execution Policy" /><published>2017-08-08T17:59:00+09:00</published><updated>2017-08-08T17:59:00+09:00</updated><id>http://localhost:4000/technique/powershell/2017/08/08/Execution_Policy</id><content type="html" xml:base="http://localhost:4000/technique/powershell/2017/08/08/Execution_Policy.html">&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;PowerShell에서 Script를 바로 실행할 수 없습니다.&lt;/p&gt;

&lt;p&gt;notepad를 이용해서 “HelloWorld!”를 작성한 뒤 &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld.ps1&lt;/code&gt; 파일을 생성합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak\Desktop&amp;gt; .\HelloWorld.ps1
.\HelloWorld.ps1 : 이 시스템에서 스크립트를 실행할 수 없으므로 C:\Users\k3y6reak\Desktop\HelloWorld.ps1 파일을 로드할 수 없습니다. 자세한 내용은 http://go.microsoft.com/fwlink/?Li
nkID=135170의 about_Execution_Policies를 참조하십시오.
위치 줄:1 문자:1
+ .\HelloWorld.ps1
+ ~~~~~~~~~~~~~~~~
    + CategoryInfo          : 보안 오류: (:) [], PSSecurityException
    + FullyQualifiedErrorId : UnauthorizedAccess&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위 에러를 살펴보면 HelloWorld.ps1 파일을 로드할 수 없고 &lt;code class=&quot;highlighter-rouge&quot;&gt;about_Execution_Policies&lt;/code&gt;를 참조하라고 나옵니다.&lt;/p&gt;

&lt;p&gt;먼저 현재 권한이 어떻게 되는지 살펴보겠습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak\Desktop&amp;gt; Get-ExecutionPolicy
Restricted&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;현재 권한은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Restricted&lt;/code&gt; 이며 &lt;code class=&quot;highlighter-rouge&quot;&gt;제한된&lt;/code&gt;이라는 뜻을 갖고 있습니다. 말 그대로 제한된 권한을 사용한다는 것입니다. 아무래도 아무 스크립트나 실행할 수 없도록 한 것 같습니다.&lt;/p&gt;

&lt;p&gt;여기서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Get-Help&lt;/code&gt;를 이용해 about_Execution_Policies에 대해서 찾아보겠습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak\Desktop&amp;gt; Get-Help about_Execution_Policies
TOPIC
    about_Execution_Policies

SHORT DESCRIPTION
    Describes the Windows PowerShell execution policies and explains
    how to manage them.
    ...(중략)

WINDOWS POWERSHELL EXECUTION POLICIES
-------------------------------------

   The Windows PowerShell execution policies are as follows:

   &quot;Restricted&quot; is the default policy.

       Restricted
           - Default execution policy in Windows 8,
             Windows Server 2012, and Windows 8.1.

           - Permits individual commands, but will not run
             scripts.

           - Prevents running of all script files, including
             formatting and configuration files (.ps1xml), module
             script files (.psm1), and Windows PowerShell
             profiles (.ps1).

             ...(중략)

       Bypass
           - Nothing is blocked and there are no warnings or
             prompts.

           - This execution policy is designed for configurations
             in which a Windows PowerShell script is built in to a
             a larger application or for configurations in which
             Windows PowerShell is the foundation for a program
             that has its own security model.


       Undefined
           - There is no execution policy set in the current scope.

           - If the execution policy in all scopes is Undefined, the
             effective execution policy is Restricted, which is the
             default execution policy.


   Note: On systems that do not distinguish Universal Naming Convention (UNC)
         paths from Internet paths, scripts that are identified by a UNC path
         might not be permitted to run with the RemoteSigned execution policy.
         ...(생략)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위 도움말을 보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Restricted&lt;/code&gt; 권한은 Default로 되어있고 이를 해지하려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;bypass&lt;/code&gt;권한을 이용해야 합니다.&lt;/p&gt;

&lt;p&gt;권한을 변경하기 위해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;관리자 권한&lt;/code&gt;으로 PowerShell를 실행시킨 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;Set-ExecutionPolicy Bypass&lt;/code&gt;를 입력해 줍니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;Windows PowerShell
Copyright (C) 2016 Microsoft Corporation. All rights reserved.

PS C:\WINDOWS\system32&amp;gt; Set-ExecutionPolicy Bypass

실행 규칙 변경
실행 정책은 신뢰하지 않는 스크립트로부터 사용자를 보호합니다. 실행 정책을 변경하면 about_Execution_Policies 도움말
항목(http://go.microsoft.com/fwlink/?LinkID=135170)에 설명된 보안 위험에 노출될 수 있습니다. 실행 정책을
변경하시겠습니까?
[Y] 예(Y)  [A] 모두 예(A)  [N] 아니요(N)  [L] 모두 아니요(L)  [S] 일시 중단(S)  [?] 도움말 (기본값은 &quot;N&quot;): Y&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;그 후 다시 &lt;code class=&quot;highlighter-rouge&quot;&gt;Get-ExecutionPolicy&lt;/code&gt;를 실행하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Bypass&lt;/code&gt;로 권한이 변경된 것을 알 수 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak\Desktop&amp;gt; Get-ExecutionPolicy
Bypass&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;다시 HelloWorld.ps1를 실행하면 정상적으로 실행되는 것을 알 수 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak\Desktop&amp;gt; .\HelloWorld.ps1
Hello World&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Condition_and_Loop</title><link href="http://localhost:4000/technique/powershell/2017/08/08/condition_and_loop.html" rel="alternate" type="text/html" title="Condition_and_Loop" /><published>2017-08-08T12:58:00+09:00</published><updated>2017-08-08T12:58:00+09:00</updated><id>http://localhost:4000/technique/powershell/2017/08/08/condition_and_loop</id><content type="html" xml:base="http://localhost:4000/technique/powershell/2017/08/08/condition_and_loop.html">&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이번에는 PowerShell에서 사용하는 조건문과 반복문에 대해서 알아보도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;조건문&quot;&gt;조건문&lt;/h3&gt;

&lt;p&gt;다른 언어와 마찬가지로 PowerShell에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;if~else&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;if~elseif~else&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;switch&lt;/code&gt;를 사용합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak&amp;gt; if (1 -gt 0) {&quot;1 &amp;gt; 0&quot;}
1 &amp;gt; 0
PS C:\Users\k3y6reak&amp;gt; if (1 -gt 5) { &quot;1 &amp;gt; 0&quot; } else{ &quot;1 &amp;lt; 5&quot; }
1 &amp;lt; 5
PS C:\Users\k3y6reak&amp;gt; $num = 2
PS C:\Users\k3y6reak&amp;gt; if ($num -eq 1) { &quot;num is 1&quot; } elseif( $num -eq 2 ) { &quot;num is 2&quot; } else { &quot;i don't know&quot; }
num is 2
PS C:\Users\k3y6reak&amp;gt; $num = 3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위와 같이 다른 언어에서 사용하는 것과 동일하게 PowerShell에서 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;switch&lt;/code&gt; 구문도 동일하게 사용하지만 좀 더 추가된 것이 있습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;를 이용하는 방법인데, 아래 예제를 보겠습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak&amp;gt; switch ($num) {1{&quot;num is 1&quot;} 2{&quot;num is two&quot;} default{&quot;i don't know&quot;}}
i don't know
PS C:\Users\k3y6reak&amp;gt; $str = &quot;abcd&quot;
PS C:\Users\k3y6reak&amp;gt; switch -wildcard ($str) { a*{&quot;a~&quot;} *b*{&quot;~b~&quot;} c*{&quot;c~&quot;}}
a~
~b~&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;를 사용해서 switch 구문을 이용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;반복문&quot;&gt;반복문&lt;/h3&gt;

&lt;p&gt;마찬가지로 &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;do~while&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;를 사용할 수 있으며 추가적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;do~until&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;foreach&lt;/code&gt;를 사용할 수 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak&amp;gt; $count = 3
PS C:\Users\k3y6reak&amp;gt; while ( $count -gt 0)
&amp;gt;&amp;gt; {
&amp;gt;&amp;gt; &quot;count is $count&quot;
&amp;gt;&amp;gt; $count--
&amp;gt;&amp;gt; }
count is 3
count is 2
count is 1
PS C:\Users\k3y6reak&amp;gt; $count = 3
PS C:\Users\k3y6reak&amp;gt; do
&amp;gt;&amp;gt; {
&amp;gt;&amp;gt; &quot;count is $count&quot;
&amp;gt;&amp;gt; $count--
&amp;gt;&amp;gt; }
&amp;gt;&amp;gt; while( $count -gt 0)
count is 3
count is 2
count is 1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;do~while&lt;/code&gt;은 동일하게 실행됩니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak&amp;gt; $count = 3
PS C:\Users\k3y6reak&amp;gt; do
&amp;gt;&amp;gt; {
&amp;gt;&amp;gt; &quot;count is $count&quot;
&amp;gt;&amp;gt; $count--
&amp;gt;&amp;gt; }
&amp;gt;&amp;gt; until( $count -gt 0)
count is 3
PS C:\Users\k3y6reak&amp;gt; do
&amp;gt;&amp;gt; {
&amp;gt;&amp;gt; &quot;count is $count&quot;
&amp;gt;&amp;gt; $count--
&amp;gt;&amp;gt; }
&amp;gt;&amp;gt; until( $count -lt 0)
count is 2
count is 1
count is 0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;until&lt;/code&gt;은 &lt;code class=&quot;highlighter-rouge&quot;&gt;~때 까지&lt;/code&gt;로 처음 실행한 &lt;code class=&quot;highlighter-rouge&quot;&gt;$count -gt 0&lt;/code&gt;의 의미는 &lt;code class=&quot;highlighter-rouge&quot;&gt;0보다 클 때까지만&lt;/code&gt;실행하기 때문에 count는 3이됩니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;until&lt;/code&gt;은 서로 반대되는 개념이라고 생각하면 됩니다.&lt;/p&gt;

&lt;p&gt;for문 또한 동일하게 사용할 수 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak&amp;gt; for ($i = 0; $i -lt 10; $i++)
&amp;gt;&amp;gt; {
&amp;gt;&amp;gt; &quot;i is $i&quot;
&amp;gt;&amp;gt; }
i is 0
i is 1
i is 2
i is 3
i is 4
i is 5
i is 6
i is 7
i is 8
i is 9&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;foreach&lt;/code&gt; 구문은 python 에서 for문과 동일합니다. java에도 foreach구문이 있죠.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak&amp;gt; $arr = &quot;Hello World!&quot;
PS C:\Users\k3y6reak&amp;gt; foreach ($str in $arr)
&amp;gt;&amp;gt; {
&amp;gt;&amp;gt; $str
&amp;gt;&amp;gt; }
Hello World!
PS C:\Users\k3y6reak&amp;gt; $arr = 1,2,3,4,5
PS C:\Users\k3y6reak&amp;gt; foreach($num in $arr)
&amp;gt;&amp;gt; {
&amp;gt;&amp;gt; $num
&amp;gt;&amp;gt; }
1
2
3
4
5&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위 예제를 보면 문자열인 경우 각 인덱스별로 값을 출력하는 것이 아니라 한 번에 출력하는 것을 알 수 있습니다.&lt;/p&gt;

&lt;p&gt;이 외에도 ForEach-Object와 Where-Object가 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak&amp;gt; Get-Process | ForEach-Object {$_.Name}
acrotray
ApplicationFrameHost
armsvc
coherence
coherence
coherence
conhost
csrss
csrss
dasHost
dllhost
dwm
explorer
fontdrvhost
fontdrvhost
Idle
IpOverUsbSvc
lsass
Memory Compression
MSASCuiL
msdtc
MsMpEng
NisSrv
OneDrive
powershell&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Get-Process를 이용해 얻은 값을 ForEach-Object를 통해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;_.&lt;/code&gt;에 넣어준 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;Name&lt;/code&gt;만 출력해주는 방법입니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak&amp;gt; Get-ChildItem C:\Users\k3y6reak\Desktop | Where-Object {$_.Name -match &quot;exe&quot;}


    디렉터리: C:\Users\k3y6reak\Desktop


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----    2017. 8. 2.  오전 12:35        1368442 asby.exe&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Where-Object를 이용해 &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt; 처럼 사용할 수 있습니다.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Type and Array</title><link href="http://localhost:4000/technique/powershell/2017/08/07/Type_and_Array.html" rel="alternate" type="text/html" title="Type and Array" /><published>2017-08-07T19:45:00+09:00</published><updated>2017-08-07T19:45:00+09:00</updated><id>http://localhost:4000/technique/powershell/2017/08/07/Type_and_Array</id><content type="html" xml:base="http://localhost:4000/technique/powershell/2017/08/07/Type_and_Array.html">&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;PowerShell에서 각 변수에 대한 자료형을 알아보는 방법과 배열에 대해서 알아보도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;type&quot;&gt;Type&lt;/h3&gt;

&lt;p&gt;PowerShell에서는 각 변수에 &lt;code class=&quot;highlighter-rouge&quot;&gt;.GetType()&lt;/code&gt;를 붙여주면 자료형을 알 수 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak&amp;gt; &quot;3&quot;.GetType()

IsPublic IsSerial Name                                     BaseType
-------- -------- ----                                     --------
True     True     String                                   System.Object


PS C:\Users\k3y6reak&amp;gt; $a = 3
PS C:\Users\k3y6reak&amp;gt; $a.GetType()

IsPublic IsSerial Name                                     BaseType
-------- -------- ----                                     --------
True     True     Int32                                    System.ValueType


PS C:\Users\k3y6reak&amp;gt; $b = 3.2
PS C:\Users\k3y6reak&amp;gt; $b.GetType()

IsPublic IsSerial Name                                     BaseType
-------- -------- ----                                     --------
True     True     Double                                   System.ValueType&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;다른 언어들과 동일하게 자료형이 정해지는 것을 알 수 있습니다.&lt;/p&gt;

&lt;p&gt;문자열을 사용하는 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;'&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&lt;/code&gt;에 대한 차이를 알아야 합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak&amp;gt; $a = &quot;Hello My name is k3y6reak&quot;
PS C:\Users\k3y6reak&amp;gt; $b = 'Hello My name is k3y6reak'
PS C:\Users\k3y6reak&amp;gt; $a.GetType()

IsPublic IsSerial Name                                     BaseType
-------- -------- ----                                     --------
True     True     String                                   System.Object


PS C:\Users\k3y6reak&amp;gt; $b.GetType()

IsPublic IsSerial Name                                     BaseType
-------- -------- ----                                     --------
True     True     String                                   System.Object


PS C:\Users\k3y6reak&amp;gt; &quot;val a is $a&quot;
val a is Hello My name is k3y6reak
PS C:\Users\k3y6reak&amp;gt; 'val b is $b'
val b is $b
PS C:\Users\k3y6reak&amp;gt; &quot;val b is $b&quot;
val b is Hello My name is k3y6reak&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&lt;/code&gt;는 모두 동일하게 String 자료형을 갖고 있으나 변수의 내용을 출력할 때는 위와 같이 차이를 보입니다.&lt;/p&gt;

&lt;p&gt;여러 줄을 이용하여 문자열을 작성하고 싶다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;@&quot;&lt;/code&gt;으로 시작해 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;@&lt;/code&gt;로 끝나면 됩니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak&amp;gt; $str = @&quot;
&amp;gt;&amp;gt; &quot;Hi&quot;
&amp;gt;&amp;gt; &quot;My name is&quot;
&amp;gt;&amp;gt; &quot;k3y6reak&quot;
&amp;gt;&amp;gt; &quot;@
PS C:\Users\k3y6reak&amp;gt; $str
&quot;Hi&quot;
&quot;My name is&quot;
&quot;k3y6reak&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;배열&quot;&gt;배열&lt;/h3&gt;

&lt;p&gt;배열은 다른언어와 동일하게 사용할 수 있습니다. 대부분의 스크립트 언어는 하나의 배열에 여러가지의 형태가 들어가도 상관없는 것 처럼 PowerShell 또한 여러가지 형태가 들어갈 수 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak&amp;gt; $arr = 1,2,3
PS C:\Users\k3y6reak&amp;gt; $arr
1
2
3
PS C:\Users\k3y6reak&amp;gt; $arr.GetType()

IsPublic IsSerial Name                                     BaseType
-------- -------- ----                                     --------
True     True     Object[]                                 System.Array&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;여기서 배열에 대한 자료형은 Object[]로 나타낸 다는 것에 주의하면 됩니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak&amp;gt; $arr2 = 1, 2.3, &quot;Hello&quot;
PS C:\Users\k3y6reak&amp;gt; $arr2
1
2.3
Hello&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위 예제처럼 여러가지 자료형을 갖는 배열을 만들 수 있습니다.&lt;/p&gt;

&lt;p&gt;아무것도 없는 배열을 만들고 싶다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;$arr = @()&lt;/code&gt;로 만들 수 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak&amp;gt; $arr3 = @()
PS C:\Users\k3y6reak&amp;gt; $arr3
PS C:\Users\k3y6reak&amp;gt; $arr3.GetType()

IsPublic IsSerial Name                                     BaseType
-------- -------- ----                                     --------
True     True     Object[]                                 System.Array&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;마찬가지로 &lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt;를 이용하여 각 인덱스의 값을 출력할 수 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak&amp;gt; $arr = &quot;Hello My name is k3y6reak&quot;
PS C:\Users\k3y6reak&amp;gt; $arr[0]
H
PS C:\Users\k3y6reak&amp;gt; $arr[1]
e&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;또한 &lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt;를 이용하여 값의 자료형을 변환할 수 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;PS C:\Users\k3y6reak&amp;gt; $i = 3.2
PS C:\Users\k3y6reak&amp;gt; $i.GetType()

IsPublic IsSerial Name                                     BaseType
-------- -------- ----                                     --------
True     True     Double                                   System.ValueType


PS C:\Users\k3y6reak&amp;gt; [int]$i
3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><summary type="html"></summary></entry></feed>