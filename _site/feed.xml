<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-07-24T17:50:08+09:00</updated><id>http://localhost:4000/</id><title type="html">k3y6reak</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><entry><title type="html">Buffer Overflow</title><link href="http://localhost:4000/technique/system_hacking/2017/07/24/Buffer_OverFlow.html" rel="alternate" type="text/html" title="Buffer Overflow" /><published>2017-07-24T15:03:00+09:00</published><updated>2017-07-24T15:03:00+09:00</updated><id>http://localhost:4000/technique/system_hacking/2017/07/24/Buffer_OverFlow</id><content type="html" xml:base="http://localhost:4000/technique/system_hacking/2017/07/24/Buffer_OverFlow.html">&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;개념&quot;&gt;개념&lt;/h3&gt;

&lt;p&gt;Buffer Overflow (이하 bof)는 크기가 정해진 배열에 해당 크기 만큼 입력해야 하지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;버퍼보다 큰 값&lt;/code&gt;
을 넣을 수 있는 취약점을 말합니다.&lt;/p&gt;

&lt;p&gt;예를들어, &lt;code class=&quot;highlighter-rouge&quot;&gt;char buf[10]&lt;/code&gt;로 선언했다면 buf는 총 10개의 공간을 갖게 됩니다. 하지만 프로그램이 실행 되면서 buf에 10개가 아닌 11개, 12개 혹은 그 이상의 값이 들어가는 것을 확인하지 않고 실행 하므로서 발생하는 취약점을 뜻 합니다.&lt;/p&gt;

&lt;p&gt;그래서 bof는 stack corruption으로도 불립니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;설명&quot;&gt;설명&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위 소스코드를 보면 buf라는 char 배열에 총 8개의 값을 넣을 수 있고, scanf를 이용해서 buf에 값을 넣어줍니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;scanf()&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;크기 제한&lt;/code&gt;이 없기 때문에 해당 부분에서 취약점이 발생할 수 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;gdb-peda$ &lt;/span&gt;Dump of assembler code &lt;span class=&quot;k&quot;&gt;for function &lt;/span&gt;main:
0x0804843d &amp;lt;+0&amp;gt;:	push	ebp
0x0804843e &amp;lt;+1&amp;gt;:	mov 	ebp,esp
0x08048440 &amp;lt;+3&amp;gt;:	sub 	esp,0x10
0x08048443 &amp;lt;+6&amp;gt;:	lea 	eax,[ebp-0x8]
0x08048446 &amp;lt;+9&amp;gt;:	mov	DWORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;esp+0x4],eax
0x0804844a &amp;lt;+13&amp;gt;:	mov	DWORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;esp], 0x80484f0
0x08048451 &amp;lt;+20&amp;gt;:	call	0x80484330 &amp;lt;__isoc99_scanf@plt&amp;gt;
0x08048456 &amp;lt;+25&amp;gt;:	mov	eax,0x0
0x0804845b &amp;lt;+30&amp;gt;:	leave
0x0804845c &amp;lt;+31&amp;gt;:	ret
End of assembler dump.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위 코드에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;push ebp&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;mov ebp,esp&lt;/code&gt;가 함수의 프롤로그가 되며, &lt;code class=&quot;highlighter-rouge&quot;&gt;leave&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ret&lt;/code&gt;이 함수의 에필로그가 됩니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;0x08048446 &amp;lt;+9&amp;gt;:	mov	DWORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;esp+0x4],eax
0x0804844a &amp;lt;+13&amp;gt;:	mov	DWORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;esp], 0x80484f0
0x08048451 &amp;lt;+20&amp;gt;:	call	0x80484330 &amp;lt;__isoc99_scanf@plt&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;스택 구조에 대해서 설명을 붙이자면 위 어셈블리 코드를 보면 scanf가 실행되기 전 &lt;code class=&quot;highlighter-rouge&quot;&gt;esp&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;esp+0x4&lt;/code&gt;에 값을 넣고 있는 것을 알 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scanf&lt;/code&gt;함수는 보통 &lt;code class=&quot;highlighter-rouge&quot;&gt;scanf(&quot;%s&quot;, buf)&lt;/code&gt; 형태로 코드를 작성합니다.&lt;/p&gt;

&lt;p&gt;여기서 &lt;code class=&quot;highlighter-rouge&quot;&gt;%s&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;buf&lt;/code&gt;가 &lt;code class=&quot;highlighter-rouge&quot;&gt;인자 값&lt;/code&gt;이 되기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;esp&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;esp+0x4&lt;/code&gt;에 값을 넣어주게 됩니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;gdb-peda$ &lt;/span&gt;x/2wx &lt;span class=&quot;nv&quot;&gt;$esp&lt;/span&gt;
0xbffff148:	0x080484f0	0xbffff150
&lt;span class=&quot;gp&quot;&gt;gdb-peda$ &lt;/span&gt;x/s 0x80484f0
0x80484f0:	&lt;span class=&quot;s2&quot;&gt;&quot;%s&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;esp 위치부터 2개가 값을 확인해 보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;0x80484f0&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;0xbffff150&lt;/code&gt;이 있습니다. scanf가 필요한 인자 값이 2개 이므로 각각 &lt;code class=&quot;highlighter-rouge&quot;&gt;%s&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;buf&lt;/code&gt;를 뜻하게 됩니다.&lt;/p&gt;

&lt;p&gt;scanf를 실행한 뒤에 buf의 주소를 확인해 보면 값이 쌓여있는 것을 알 수 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;gdb-peda$ &lt;/span&gt;x/10wx 0xbffff150
0xbffff150:	0x34333231	0x00000000	0x00000000	0xb7e1fa83
0xbffff160:	0x00000001	0xbffff1f4	0xbffff1fc	0xb7feccea
0xbffff170:	0x00000001	0xbffff1f4&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1234&lt;/code&gt;라는 값을 입력했더니 &lt;code class=&quot;highlighter-rouge&quot;&gt;0x34333231&lt;/code&gt;라는 값이 저장되었습니다. 1234라는 값이 각각 hex 값으로 저장된 것입니다. 하지만 ascii 코드를 살펴보면 4321 순으로 저장된 것을 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;이는 &lt;code class=&quot;highlighter-rouge&quot;&gt;리틀엔디안과 빅엔디안&lt;/code&gt;차이에 따라서 결정됩니다.&lt;/p&gt;

&lt;p&gt;코드를 하나씩 살펴보면서 값이 어떻게 저장되는지 확인해 봤습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;scanf&lt;/code&gt;함수에서 취약점이 발생한다고 했으니 어떻게 되는지 알아보도록 하겠습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;gdb-peda$ &lt;/span&gt;x/4wx 0xbffff150
0xbffff150:	0x34333231	0x38373635	0x00000000	0xb7e1fa83&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이번에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;12345678&lt;/code&gt;을 입력했습니다. 위 스택을 살펴보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;4321 8765&lt;/code&gt; 순으로 쌓인 것을 알 수 있으며 buf의 크기가 8인데 8자리를 모두 사용했습니다.&lt;/p&gt;

&lt;p&gt;여기서 &lt;code class=&quot;highlighter-rouge&quot;&gt;scanf 함수는 크기를 제한하지 않으므로&lt;/code&gt; 값을 더 입력해 보겠습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;gdb-peda$ &lt;/span&gt;x/4wx 0xbffff150
0xbffff150:	0x34333231	0x38373635	0x32313039	0x36353433&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;값을 더 입력했더니 뒤에 존재했던 값들이 모두 덮어 씌워졌습니다.&lt;/p&gt;

&lt;p&gt;이 상태에서 프로그램을 진행 시키면 &lt;code class=&quot;highlighter-rouge&quot;&gt;0x36353433 in ?? ()&lt;/code&gt; 과 같이 나타납니다. 이 말은 &lt;code class=&quot;highlighter-rouge&quot;&gt;0x36353433 주소로 이동&lt;/code&gt;을 했다는 것 입니다.&lt;/p&gt;

&lt;p&gt;이제 여기서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Save Frame Pointer&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;Return&lt;/code&gt;을 알아야 합니다.&lt;/p&gt;

&lt;p&gt;Save Frame Pointer는 &lt;code class=&quot;highlighter-rouge&quot;&gt;이전함수에서의 ebp 값을 저장&lt;/code&gt;해 둡니다. 해당 함수가 실행되고 난 후에 다시 돌아가야 할 때 이 값을 기준으로 돌아가게 됩니다.&lt;/p&gt;

&lt;p&gt;Return은 해당 주소로 이동하는 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/system_hacking/bof/stack.png&quot; alt=&quot;stack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Stack의 구조는 위와 같이 이루어져 있기 때문에 앞서 값을 넘치게 입력했을 경우 0x36353433로 이동하게 된 것입니다.&lt;/p&gt;

&lt;p&gt;이러한 방법으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;RET 값을 조작해서 system 함수를 호출하거나 프로그램 상에서 호출되지 않는 함수에도 접근이 가능&lt;/code&gt;하게 됩니다.&lt;/p&gt;</content><author><name></name></author><summary type="html">개념</summary></entry></feed>